//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleAppForTesting.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Administrators", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class Administrators : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AdminIdentifierField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AdminIdentifier {
            get {
                return this.AdminIdentifierField;
            }
            set {
                if ((object.ReferenceEquals(this.AdminIdentifierField, value) != true)) {
                    this.AdminIdentifierField = value;
                    this.RaisePropertyChanged("AdminIdentifier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Exams", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class Exams : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ExamDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExamTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> InsertDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> LimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ModifiedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ModifyDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoomField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> SubjectIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ExamDate {
            get {
                return this.ExamDateField;
            }
            set {
                if ((this.ExamDateField.Equals(value) != true)) {
                    this.ExamDateField = value;
                    this.RaisePropertyChanged("ExamDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExamType {
            get {
                return this.ExamTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ExamTypeField, value) != true)) {
                    this.ExamTypeField = value;
                    this.RaisePropertyChanged("ExamType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> InsertDate {
            get {
                return this.InsertDateField;
            }
            set {
                if ((this.InsertDateField.Equals(value) != true)) {
                    this.InsertDateField = value;
                    this.RaisePropertyChanged("InsertDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Limit {
            get {
                return this.LimitField;
            }
            set {
                if ((this.LimitField.Equals(value) != true)) {
                    this.LimitField = value;
                    this.RaisePropertyChanged("Limit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ModifiedBy {
            get {
                return this.ModifiedByField;
            }
            set {
                if ((this.ModifiedByField.Equals(value) != true)) {
                    this.ModifiedByField = value;
                    this.RaisePropertyChanged("ModifiedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ModifyDate {
            get {
                return this.ModifyDateField;
            }
            set {
                if ((this.ModifyDateField.Equals(value) != true)) {
                    this.ModifyDateField = value;
                    this.RaisePropertyChanged("ModifyDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Room {
            get {
                return this.RoomField;
            }
            set {
                if ((object.ReferenceEquals(this.RoomField, value) != true)) {
                    this.RoomField = value;
                    this.RaisePropertyChanged("Room");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> SubjectID {
            get {
                return this.SubjectIDField;
            }
            set {
                if ((this.SubjectIDField.Equals(value) != true)) {
                    this.SubjectIDField = value;
                    this.RaisePropertyChanged("SubjectID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExamsUsers", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class ExamsUsers : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ExamIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> InsertDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ModifiedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ModifyDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ExamId {
            get {
                return this.ExamIdField;
            }
            set {
                if ((this.ExamIdField.Equals(value) != true)) {
                    this.ExamIdField = value;
                    this.RaisePropertyChanged("ExamId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> InsertDate {
            get {
                return this.InsertDateField;
            }
            set {
                if ((this.InsertDateField.Equals(value) != true)) {
                    this.InsertDateField = value;
                    this.RaisePropertyChanged("InsertDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ModifiedBy {
            get {
                return this.ModifiedByField;
            }
            set {
                if ((this.ModifiedByField.Equals(value) != true)) {
                    this.ModifiedByField = value;
                    this.RaisePropertyChanged("ModifiedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ModifyDate {
            get {
                return this.ModifyDateField;
            }
            set {
                if ((this.ModifyDateField.Equals(value) != true)) {
                    this.ModifyDateField = value;
                    this.RaisePropertyChanged("ModifyDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Users", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class Users : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> BirthDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BirthPlaceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EduCardIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EduIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> InsertDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MedicalCardIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MiddleNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ModifiedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ModifyDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MothersNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NationalityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PersonalIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> SemesterIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SemesterStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> BirthDate {
            get {
                return this.BirthDateField;
            }
            set {
                if ((this.BirthDateField.Equals(value) != true)) {
                    this.BirthDateField = value;
                    this.RaisePropertyChanged("BirthDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BirthPlace {
            get {
                return this.BirthPlaceField;
            }
            set {
                if ((object.ReferenceEquals(this.BirthPlaceField, value) != true)) {
                    this.BirthPlaceField = value;
                    this.RaisePropertyChanged("BirthPlace");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EduCardId {
            get {
                return this.EduCardIdField;
            }
            set {
                if ((object.ReferenceEquals(this.EduCardIdField, value) != true)) {
                    this.EduCardIdField = value;
                    this.RaisePropertyChanged("EduCardId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EduId {
            get {
                return this.EduIdField;
            }
            set {
                if ((object.ReferenceEquals(this.EduIdField, value) != true)) {
                    this.EduIdField = value;
                    this.RaisePropertyChanged("EduId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> InsertDate {
            get {
                return this.InsertDateField;
            }
            set {
                if ((this.InsertDateField.Equals(value) != true)) {
                    this.InsertDateField = value;
                    this.RaisePropertyChanged("InsertDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MedicalCardId {
            get {
                return this.MedicalCardIdField;
            }
            set {
                if ((object.ReferenceEquals(this.MedicalCardIdField, value) != true)) {
                    this.MedicalCardIdField = value;
                    this.RaisePropertyChanged("MedicalCardId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MiddleName {
            get {
                return this.MiddleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MiddleNameField, value) != true)) {
                    this.MiddleNameField = value;
                    this.RaisePropertyChanged("MiddleName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ModifiedBy {
            get {
                return this.ModifiedByField;
            }
            set {
                if ((this.ModifiedByField.Equals(value) != true)) {
                    this.ModifiedByField = value;
                    this.RaisePropertyChanged("ModifiedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ModifyDate {
            get {
                return this.ModifyDateField;
            }
            set {
                if ((this.ModifyDateField.Equals(value) != true)) {
                    this.ModifyDateField = value;
                    this.RaisePropertyChanged("ModifyDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MothersName {
            get {
                return this.MothersNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MothersNameField, value) != true)) {
                    this.MothersNameField = value;
                    this.RaisePropertyChanged("MothersName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Nationality {
            get {
                return this.NationalityField;
            }
            set {
                if ((object.ReferenceEquals(this.NationalityField, value) != true)) {
                    this.NationalityField = value;
                    this.RaisePropertyChanged("Nationality");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PersonalId {
            get {
                return this.PersonalIdField;
            }
            set {
                if ((object.ReferenceEquals(this.PersonalIdField, value) != true)) {
                    this.PersonalIdField = value;
                    this.RaisePropertyChanged("PersonalId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> SemesterId {
            get {
                return this.SemesterIdField;
            }
            set {
                if ((this.SemesterIdField.Equals(value) != true)) {
                    this.SemesterIdField = value;
                    this.RaisePropertyChanged("SemesterId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SemesterState {
            get {
                return this.SemesterStateField;
            }
            set {
                if ((object.ReferenceEquals(this.SemesterStateField, value) != true)) {
                    this.SemesterStateField = value;
                    this.RaisePropertyChanged("SemesterState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserType {
            get {
                return this.UserTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.UserTypeField, value) != true)) {
                    this.UserTypeField = value;
                    this.RaisePropertyChanged("UserType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Grades", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class Grades : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ExamIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<short> GradeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> InsertDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ModifiedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ModifyDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> SubjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ExamId {
            get {
                return this.ExamIdField;
            }
            set {
                if ((this.ExamIdField.Equals(value) != true)) {
                    this.ExamIdField = value;
                    this.RaisePropertyChanged("ExamId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<short> Grade {
            get {
                return this.GradeField;
            }
            set {
                if ((this.GradeField.Equals(value) != true)) {
                    this.GradeField = value;
                    this.RaisePropertyChanged("Grade");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> InsertDate {
            get {
                return this.InsertDateField;
            }
            set {
                if ((this.InsertDateField.Equals(value) != true)) {
                    this.InsertDateField = value;
                    this.RaisePropertyChanged("InsertDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ModifiedBy {
            get {
                return this.ModifiedByField;
            }
            set {
                if ((this.ModifiedByField.Equals(value) != true)) {
                    this.ModifiedByField = value;
                    this.RaisePropertyChanged("ModifiedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ModifyDate {
            get {
                return this.ModifyDateField;
            }
            set {
                if ((this.ModifyDateField.Equals(value) != true)) {
                    this.ModifyDateField = value;
                    this.RaisePropertyChanged("ModifyDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> SubjectId {
            get {
                return this.SubjectIdField;
            }
            set {
                if ((this.SubjectIdField.Equals(value) != true)) {
                    this.SubjectIdField = value;
                    this.RaisePropertyChanged("SubjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Managers", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class Managers : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ManagerIdentifierField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ManagerIdentifier {
            get {
                return this.ManagerIdentifierField;
            }
            set {
                if ((object.ReferenceEquals(this.ManagerIdentifierField, value) != true)) {
                    this.ManagerIdentifierField = value;
                    this.RaisePropertyChanged("ManagerIdentifier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Messages", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class Messages : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> FromDeletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> FromDeletedPermField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> FromHighlightedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> FromUserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> ReadField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> SentDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> ToDeletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> ToDeletedPermField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> ToHighlightedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ToUserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> FromDeleted {
            get {
                return this.FromDeletedField;
            }
            set {
                if ((this.FromDeletedField.Equals(value) != true)) {
                    this.FromDeletedField = value;
                    this.RaisePropertyChanged("FromDeleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> FromDeletedPerm {
            get {
                return this.FromDeletedPermField;
            }
            set {
                if ((this.FromDeletedPermField.Equals(value) != true)) {
                    this.FromDeletedPermField = value;
                    this.RaisePropertyChanged("FromDeletedPerm");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> FromHighlighted {
            get {
                return this.FromHighlightedField;
            }
            set {
                if ((this.FromHighlightedField.Equals(value) != true)) {
                    this.FromHighlightedField = value;
                    this.RaisePropertyChanged("FromHighlighted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> FromUserId {
            get {
                return this.FromUserIdField;
            }
            set {
                if ((this.FromUserIdField.Equals(value) != true)) {
                    this.FromUserIdField = value;
                    this.RaisePropertyChanged("FromUserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> Read {
            get {
                return this.ReadField;
            }
            set {
                if ((this.ReadField.Equals(value) != true)) {
                    this.ReadField = value;
                    this.RaisePropertyChanged("Read");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> SentDate {
            get {
                return this.SentDateField;
            }
            set {
                if ((this.SentDateField.Equals(value) != true)) {
                    this.SentDateField = value;
                    this.RaisePropertyChanged("SentDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Subject {
            get {
                return this.SubjectField;
            }
            set {
                if ((object.ReferenceEquals(this.SubjectField, value) != true)) {
                    this.SubjectField = value;
                    this.RaisePropertyChanged("Subject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> ToDeleted {
            get {
                return this.ToDeletedField;
            }
            set {
                if ((this.ToDeletedField.Equals(value) != true)) {
                    this.ToDeletedField = value;
                    this.RaisePropertyChanged("ToDeleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> ToDeletedPerm {
            get {
                return this.ToDeletedPermField;
            }
            set {
                if ((this.ToDeletedPermField.Equals(value) != true)) {
                    this.ToDeletedPermField = value;
                    this.RaisePropertyChanged("ToDeletedPerm");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> ToHighlighted {
            get {
                return this.ToHighlightedField;
            }
            set {
                if ((this.ToHighlightedField.Equals(value) != true)) {
                    this.ToHighlightedField = value;
                    this.RaisePropertyChanged("ToHighlighted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ToUserId {
            get {
                return this.ToUserIdField;
            }
            set {
                if ((this.ToUserIdField.Equals(value) != true)) {
                    this.ToUserIdField = value;
                    this.RaisePropertyChanged("ToUserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Semesters", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class Semesters : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Students", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class Students : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StudyFormField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StudyForm {
            get {
                return this.StudyFormField;
            }
            set {
                if ((object.ReferenceEquals(this.StudyFormField, value) != true)) {
                    this.StudyFormField = value;
                    this.RaisePropertyChanged("StudyForm");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Subjects", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class Subjects : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<byte> CreditsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> SemesterIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubjectCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubjectNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<byte> Credits {
            get {
                return this.CreditsField;
            }
            set {
                if ((this.CreditsField.Equals(value) != true)) {
                    this.CreditsField = value;
                    this.RaisePropertyChanged("Credits");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> SemesterId {
            get {
                return this.SemesterIdField;
            }
            set {
                if ((this.SemesterIdField.Equals(value) != true)) {
                    this.SemesterIdField = value;
                    this.RaisePropertyChanged("SemesterId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubjectCode {
            get {
                return this.SubjectCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.SubjectCodeField, value) != true)) {
                    this.SubjectCodeField = value;
                    this.RaisePropertyChanged("SubjectCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubjectName {
            get {
                return this.SubjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SubjectNameField, value) != true)) {
                    this.SubjectNameField = value;
                    this.RaisePropertyChanged("SubjectName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SubjectsUsers", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class SubjectsUsers : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> EnrollDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ModifiedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ModifyDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> SubjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> EnrollDate {
            get {
                return this.EnrollDateField;
            }
            set {
                if ((this.EnrollDateField.Equals(value) != true)) {
                    this.EnrollDateField = value;
                    this.RaisePropertyChanged("EnrollDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ModifiedBy {
            get {
                return this.ModifiedByField;
            }
            set {
                if ((this.ModifiedByField.Equals(value) != true)) {
                    this.ModifiedByField = value;
                    this.RaisePropertyChanged("ModifiedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ModifyDate {
            get {
                return this.ModifyDateField;
            }
            set {
                if ((this.ModifyDateField.Equals(value) != true)) {
                    this.ModifyDateField = value;
                    this.RaisePropertyChanged("ModifyDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> SubjectId {
            get {
                return this.SubjectIdField;
            }
            set {
                if ((this.SubjectIdField.Equals(value) != true)) {
                    this.SubjectIdField = value;
                    this.RaisePropertyChanged("SubjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Teachers", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class Teachers : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RankField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Rank {
            get {
                return this.RankField;
            }
            set {
                if ((this.RankField.Equals(value) != true)) {
                    this.RankField = value;
                    this.RaisePropertyChanged("Rank");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AppInfo", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class AppInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AppNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MakerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AppName {
            get {
                return this.AppNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AppNameField, value) != true)) {
                    this.AppNameField = value;
                    this.RaisePropertyChanged("AppName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Maker {
            get {
                return this.MakerField;
            }
            set {
                if ((object.ReferenceEquals(this.MakerField, value) != true)) {
                    this.MakerField = value;
                    this.RaisePropertyChanged("Maker");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllAdministrators", ReplyAction="http://tempuri.org/IService/GetAllAdministratorsResponse")]
        ConsoleAppForTesting.ServiceReference.Administrators[] GetAllAdministrators();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllAdministrators", ReplyAction="http://tempuri.org/IService/GetAllAdministratorsResponse")]
        System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Administrators[]> GetAllAdministratorsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAdministratorById", ReplyAction="http://tempuri.org/IService/GetAdministratorByIdResponse")]
        ConsoleAppForTesting.ServiceReference.Administrators GetAdministratorById(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAdministratorById", ReplyAction="http://tempuri.org/IService/GetAdministratorByIdResponse")]
        System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Administrators> GetAdministratorByIdAsync(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfAdministrator", ReplyAction="http://tempuri.org/IService/GetIdOfAdministratorResponse")]
        int GetIdOfAdministrator(ConsoleAppForTesting.ServiceReference.Administrators entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfAdministrator", ReplyAction="http://tempuri.org/IService/GetIdOfAdministratorResponse")]
        System.Threading.Tasks.Task<int> GetIdOfAdministratorAsync(ConsoleAppForTesting.ServiceReference.Administrators entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveAdministratorById", ReplyAction="http://tempuri.org/IService/RemoveAdministratorByIdResponse")]
        void RemoveAdministratorById(int entityToRemoveById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveAdministratorById", ReplyAction="http://tempuri.org/IService/RemoveAdministratorByIdResponse")]
        System.Threading.Tasks.Task RemoveAdministratorByIdAsync(int entityToRemoveById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateAdministrator", ReplyAction="http://tempuri.org/IService/UpdateAdministratorResponse")]
        void UpdateAdministrator(ConsoleAppForTesting.ServiceReference.Administrators entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateAdministrator", ReplyAction="http://tempuri.org/IService/UpdateAdministratorResponse")]
        System.Threading.Tasks.Task UpdateAdministratorAsync(ConsoleAppForTesting.ServiceReference.Administrators entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddExam", ReplyAction="http://tempuri.org/IService/AddExamResponse")]
        void AddExam(ConsoleAppForTesting.ServiceReference.Exams entityToAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddExam", ReplyAction="http://tempuri.org/IService/AddExamResponse")]
        System.Threading.Tasks.Task AddExamAsync(ConsoleAppForTesting.ServiceReference.Exams entityToAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllExams", ReplyAction="http://tempuri.org/IService/GetAllExamsResponse")]
        ConsoleAppForTesting.ServiceReference.Exams[] GetAllExams();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllExams", ReplyAction="http://tempuri.org/IService/GetAllExamsResponse")]
        System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Exams[]> GetAllExamsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetExamById", ReplyAction="http://tempuri.org/IService/GetExamByIdResponse")]
        ConsoleAppForTesting.ServiceReference.Exams GetExamById(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetExamById", ReplyAction="http://tempuri.org/IService/GetExamByIdResponse")]
        System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Exams> GetExamByIdAsync(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfExam", ReplyAction="http://tempuri.org/IService/GetIdOfExamResponse")]
        int GetIdOfExam(ConsoleAppForTesting.ServiceReference.Exams entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfExam", ReplyAction="http://tempuri.org/IService/GetIdOfExamResponse")]
        System.Threading.Tasks.Task<int> GetIdOfExamAsync(ConsoleAppForTesting.ServiceReference.Exams entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveExamById", ReplyAction="http://tempuri.org/IService/RemoveExamByIdResponse")]
        void RemoveExamById(int entityToRemoveById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveExamById", ReplyAction="http://tempuri.org/IService/RemoveExamByIdResponse")]
        System.Threading.Tasks.Task RemoveExamByIdAsync(int entityToRemoveById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateExam", ReplyAction="http://tempuri.org/IService/UpdateExamResponse")]
        void UpdateExam(ConsoleAppForTesting.ServiceReference.Exams entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateExam", ReplyAction="http://tempuri.org/IService/UpdateExamResponse")]
        System.Threading.Tasks.Task UpdateExamAsync(ConsoleAppForTesting.ServiceReference.Exams entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddExamsUser", ReplyAction="http://tempuri.org/IService/AddExamsUserResponse")]
        void AddExamsUser(ConsoleAppForTesting.ServiceReference.ExamsUsers entityToAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddExamsUser", ReplyAction="http://tempuri.org/IService/AddExamsUserResponse")]
        System.Threading.Tasks.Task AddExamsUserAsync(ConsoleAppForTesting.ServiceReference.ExamsUsers entityToAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllExamsUsers", ReplyAction="http://tempuri.org/IService/GetAllExamsUsersResponse")]
        ConsoleAppForTesting.ServiceReference.ExamsUsers[] GetAllExamsUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllExamsUsers", ReplyAction="http://tempuri.org/IService/GetAllExamsUsersResponse")]
        System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.ExamsUsers[]> GetAllExamsUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetExamsUserById", ReplyAction="http://tempuri.org/IService/GetExamsUserByIdResponse")]
        ConsoleAppForTesting.ServiceReference.ExamsUsers GetExamsUserById(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetExamsUserById", ReplyAction="http://tempuri.org/IService/GetExamsUserByIdResponse")]
        System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.ExamsUsers> GetExamsUserByIdAsync(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfExamsUser", ReplyAction="http://tempuri.org/IService/GetIdOfExamsUserResponse")]
        int GetIdOfExamsUser(ConsoleAppForTesting.ServiceReference.ExamsUsers entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfExamsUser", ReplyAction="http://tempuri.org/IService/GetIdOfExamsUserResponse")]
        System.Threading.Tasks.Task<int> GetIdOfExamsUserAsync(ConsoleAppForTesting.ServiceReference.ExamsUsers entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveExamsUserById", ReplyAction="http://tempuri.org/IService/RemoveExamsUserByIdResponse")]
        void RemoveExamsUserById(int entityToRemoveById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveExamsUserById", ReplyAction="http://tempuri.org/IService/RemoveExamsUserByIdResponse")]
        System.Threading.Tasks.Task RemoveExamsUserByIdAsync(int entityToRemoveById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetExamStudents", ReplyAction="http://tempuri.org/IService/GetExamStudentsResponse")]
        ConsoleAppForTesting.ServiceReference.Users[] GetExamStudents(int examId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetExamStudents", ReplyAction="http://tempuri.org/IService/GetExamStudentsResponse")]
        System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Users[]> GetExamStudentsAsync(int examId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetExamTeacher", ReplyAction="http://tempuri.org/IService/GetExamTeacherResponse")]
        ConsoleAppForTesting.ServiceReference.Users GetExamTeacher(int examId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetExamTeacher", ReplyAction="http://tempuri.org/IService/GetExamTeacherResponse")]
        System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Users> GetExamTeacherAsync(int examId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateExamsUser", ReplyAction="http://tempuri.org/IService/UpdateExamsUserResponse")]
        void UpdateExamsUser(ConsoleAppForTesting.ServiceReference.ExamsUsers entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateExamsUser", ReplyAction="http://tempuri.org/IService/UpdateExamsUserResponse")]
        System.Threading.Tasks.Task UpdateExamsUserAsync(ConsoleAppForTesting.ServiceReference.ExamsUsers entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddGrade", ReplyAction="http://tempuri.org/IService/AddGradeResponse")]
        void AddGrade(ConsoleAppForTesting.ServiceReference.Grades entityToAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddGrade", ReplyAction="http://tempuri.org/IService/AddGradeResponse")]
        System.Threading.Tasks.Task AddGradeAsync(ConsoleAppForTesting.ServiceReference.Grades entityToAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllGrades", ReplyAction="http://tempuri.org/IService/GetAllGradesResponse")]
        ConsoleAppForTesting.ServiceReference.Grades[] GetAllGrades();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllGrades", ReplyAction="http://tempuri.org/IService/GetAllGradesResponse")]
        System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Grades[]> GetAllGradesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetGradeById", ReplyAction="http://tempuri.org/IService/GetGradeByIdResponse")]
        ConsoleAppForTesting.ServiceReference.Grades GetGradeById(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetGradeById", ReplyAction="http://tempuri.org/IService/GetGradeByIdResponse")]
        System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Grades> GetGradeByIdAsync(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfGrade", ReplyAction="http://tempuri.org/IService/GetIdOfGradeResponse")]
        int GetIdOfGrade(ConsoleAppForTesting.ServiceReference.Grades entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfGrade", ReplyAction="http://tempuri.org/IService/GetIdOfGradeResponse")]
        System.Threading.Tasks.Task<int> GetIdOfGradeAsync(ConsoleAppForTesting.ServiceReference.Grades entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveGradeById", ReplyAction="http://tempuri.org/IService/RemoveGradeByIdResponse")]
        void RemoveGradeById(int entityToRemoveById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveGradeById", ReplyAction="http://tempuri.org/IService/RemoveGradeByIdResponse")]
        System.Threading.Tasks.Task RemoveGradeByIdAsync(int entityToRemoveById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateGrade", ReplyAction="http://tempuri.org/IService/UpdateGradeResponse")]
        void UpdateGrade(ConsoleAppForTesting.ServiceReference.Grades entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateGrade", ReplyAction="http://tempuri.org/IService/UpdateGradeResponse")]
        System.Threading.Tasks.Task UpdateGradeAsync(ConsoleAppForTesting.ServiceReference.Grades entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllManagers", ReplyAction="http://tempuri.org/IService/GetAllManagersResponse")]
        ConsoleAppForTesting.ServiceReference.Managers[] GetAllManagers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllManagers", ReplyAction="http://tempuri.org/IService/GetAllManagersResponse")]
        System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Managers[]> GetAllManagersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetManagerById", ReplyAction="http://tempuri.org/IService/GetManagerByIdResponse")]
        ConsoleAppForTesting.ServiceReference.Managers GetManagerById(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetManagerById", ReplyAction="http://tempuri.org/IService/GetManagerByIdResponse")]
        System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Managers> GetManagerByIdAsync(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfManager", ReplyAction="http://tempuri.org/IService/GetIdOfManagerResponse")]
        int GetIdOfManager(ConsoleAppForTesting.ServiceReference.Managers entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfManager", ReplyAction="http://tempuri.org/IService/GetIdOfManagerResponse")]
        System.Threading.Tasks.Task<int> GetIdOfManagerAsync(ConsoleAppForTesting.ServiceReference.Managers entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveManagerById", ReplyAction="http://tempuri.org/IService/RemoveManagerByIdResponse")]
        void RemoveManagerById(int entityToRemoveById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveManagerById", ReplyAction="http://tempuri.org/IService/RemoveManagerByIdResponse")]
        System.Threading.Tasks.Task RemoveManagerByIdAsync(int entityToRemoveById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateManager", ReplyAction="http://tempuri.org/IService/UpdateManagerResponse")]
        void UpdateManager(ConsoleAppForTesting.ServiceReference.Managers entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateManager", ReplyAction="http://tempuri.org/IService/UpdateManagerResponse")]
        System.Threading.Tasks.Task UpdateManagerAsync(ConsoleAppForTesting.ServiceReference.Managers entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddMessage", ReplyAction="http://tempuri.org/IService/AddMessageResponse")]
        void AddMessage(ConsoleAppForTesting.ServiceReference.Messages entityToAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddMessage", ReplyAction="http://tempuri.org/IService/AddMessageResponse")]
        System.Threading.Tasks.Task AddMessageAsync(ConsoleAppForTesting.ServiceReference.Messages entityToAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllMessages", ReplyAction="http://tempuri.org/IService/GetAllMessagesResponse")]
        ConsoleAppForTesting.ServiceReference.Messages[] GetAllMessages();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllMessages", ReplyAction="http://tempuri.org/IService/GetAllMessagesResponse")]
        System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Messages[]> GetAllMessagesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMessageById", ReplyAction="http://tempuri.org/IService/GetMessageByIdResponse")]
        ConsoleAppForTesting.ServiceReference.Messages GetMessageById(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMessageById", ReplyAction="http://tempuri.org/IService/GetMessageByIdResponse")]
        System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Messages> GetMessageByIdAsync(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfMessage", ReplyAction="http://tempuri.org/IService/GetIdOfMessageResponse")]
        int GetIdOfMessage(ConsoleAppForTesting.ServiceReference.Messages entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfMessage", ReplyAction="http://tempuri.org/IService/GetIdOfMessageResponse")]
        System.Threading.Tasks.Task<int> GetIdOfMessageAsync(ConsoleAppForTesting.ServiceReference.Messages entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetReceivedMessages", ReplyAction="http://tempuri.org/IService/GetReceivedMessagesResponse")]
        ConsoleAppForTesting.ServiceReference.Messages[] GetReceivedMessages(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetReceivedMessages", ReplyAction="http://tempuri.org/IService/GetReceivedMessagesResponse")]
        System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Messages[]> GetReceivedMessagesAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSentMessages", ReplyAction="http://tempuri.org/IService/GetSentMessagesResponse")]
        ConsoleAppForTesting.ServiceReference.Messages[] GetSentMessages(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSentMessages", ReplyAction="http://tempuri.org/IService/GetSentMessagesResponse")]
        System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Messages[]> GetSentMessagesAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveMessageById", ReplyAction="http://tempuri.org/IService/RemoveMessageByIdResponse")]
        void RemoveMessageById(int entityToRemoveById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveMessageById", ReplyAction="http://tempuri.org/IService/RemoveMessageByIdResponse")]
        System.Threading.Tasks.Task RemoveMessageByIdAsync(int entityToRemoveById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateMessage", ReplyAction="http://tempuri.org/IService/UpdateMessageResponse")]
        void UpdateMessage(ConsoleAppForTesting.ServiceReference.Messages entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateMessage", ReplyAction="http://tempuri.org/IService/UpdateMessageResponse")]
        System.Threading.Tasks.Task UpdateMessageAsync(ConsoleAppForTesting.ServiceReference.Messages entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddSemester", ReplyAction="http://tempuri.org/IService/AddSemesterResponse")]
        void AddSemester(ConsoleAppForTesting.ServiceReference.Semesters entityToAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddSemester", ReplyAction="http://tempuri.org/IService/AddSemesterResponse")]
        System.Threading.Tasks.Task AddSemesterAsync(ConsoleAppForTesting.ServiceReference.Semesters entityToAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllSemesters", ReplyAction="http://tempuri.org/IService/GetAllSemestersResponse")]
        ConsoleAppForTesting.ServiceReference.Semesters[] GetAllSemesters();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllSemesters", ReplyAction="http://tempuri.org/IService/GetAllSemestersResponse")]
        System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Semesters[]> GetAllSemestersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSemesterById", ReplyAction="http://tempuri.org/IService/GetSemesterByIdResponse")]
        ConsoleAppForTesting.ServiceReference.Semesters GetSemesterById(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSemesterById", ReplyAction="http://tempuri.org/IService/GetSemesterByIdResponse")]
        System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Semesters> GetSemesterByIdAsync(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfSemester", ReplyAction="http://tempuri.org/IService/GetIdOfSemesterResponse")]
        int GetIdOfSemester(ConsoleAppForTesting.ServiceReference.Semesters entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfSemester", ReplyAction="http://tempuri.org/IService/GetIdOfSemesterResponse")]
        System.Threading.Tasks.Task<int> GetIdOfSemesterAsync(ConsoleAppForTesting.ServiceReference.Semesters entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveSemesterById", ReplyAction="http://tempuri.org/IService/RemoveSemesterByIdResponse")]
        void RemoveSemesterById(int entityToRemoveById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveSemesterById", ReplyAction="http://tempuri.org/IService/RemoveSemesterByIdResponse")]
        System.Threading.Tasks.Task RemoveSemesterByIdAsync(int entityToRemoveById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateSemester", ReplyAction="http://tempuri.org/IService/UpdateSemesterResponse")]
        void UpdateSemester(ConsoleAppForTesting.ServiceReference.Semesters entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateSemester", ReplyAction="http://tempuri.org/IService/UpdateSemesterResponse")]
        System.Threading.Tasks.Task UpdateSemesterAsync(ConsoleAppForTesting.ServiceReference.Semesters entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllStudents", ReplyAction="http://tempuri.org/IService/GetAllStudentsResponse")]
        ConsoleAppForTesting.ServiceReference.Students[] GetAllStudents();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllStudents", ReplyAction="http://tempuri.org/IService/GetAllStudentsResponse")]
        System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Students[]> GetAllStudentsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetStudentById", ReplyAction="http://tempuri.org/IService/GetStudentByIdResponse")]
        ConsoleAppForTesting.ServiceReference.Students GetStudentById(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetStudentById", ReplyAction="http://tempuri.org/IService/GetStudentByIdResponse")]
        System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Students> GetStudentByIdAsync(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfStudent", ReplyAction="http://tempuri.org/IService/GetIdOfStudentResponse")]
        int GetIdOfStudent(ConsoleAppForTesting.ServiceReference.Students entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfStudent", ReplyAction="http://tempuri.org/IService/GetIdOfStudentResponse")]
        System.Threading.Tasks.Task<int> GetIdOfStudentAsync(ConsoleAppForTesting.ServiceReference.Students entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveStudentById", ReplyAction="http://tempuri.org/IService/RemoveStudentByIdResponse")]
        void RemoveStudentById(int entityToRemoveById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveStudentById", ReplyAction="http://tempuri.org/IService/RemoveStudentByIdResponse")]
        System.Threading.Tasks.Task RemoveStudentByIdAsync(int entityToRemoveById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateStudent", ReplyAction="http://tempuri.org/IService/UpdateStudentResponse")]
        void UpdateStudent(ConsoleAppForTesting.ServiceReference.Students entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateStudent", ReplyAction="http://tempuri.org/IService/UpdateStudentResponse")]
        System.Threading.Tasks.Task UpdateStudentAsync(ConsoleAppForTesting.ServiceReference.Students entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddSubject", ReplyAction="http://tempuri.org/IService/AddSubjectResponse")]
        void AddSubject(ConsoleAppForTesting.ServiceReference.Subjects entityToAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddSubject", ReplyAction="http://tempuri.org/IService/AddSubjectResponse")]
        System.Threading.Tasks.Task AddSubjectAsync(ConsoleAppForTesting.ServiceReference.Subjects entityToAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllSubjects", ReplyAction="http://tempuri.org/IService/GetAllSubjectsResponse")]
        ConsoleAppForTesting.ServiceReference.Subjects[] GetAllSubjects();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllSubjects", ReplyAction="http://tempuri.org/IService/GetAllSubjectsResponse")]
        System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Subjects[]> GetAllSubjectsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSubjectById", ReplyAction="http://tempuri.org/IService/GetSubjectByIdResponse")]
        ConsoleAppForTesting.ServiceReference.Subjects GetSubjectById(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSubjectById", ReplyAction="http://tempuri.org/IService/GetSubjectByIdResponse")]
        System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Subjects> GetSubjectByIdAsync(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfSubject", ReplyAction="http://tempuri.org/IService/GetIdOfSubjectResponse")]
        int GetIdOfSubject(ConsoleAppForTesting.ServiceReference.Subjects entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfSubject", ReplyAction="http://tempuri.org/IService/GetIdOfSubjectResponse")]
        System.Threading.Tasks.Task<int> GetIdOfSubjectAsync(ConsoleAppForTesting.ServiceReference.Subjects entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveSubjectById", ReplyAction="http://tempuri.org/IService/RemoveSubjectByIdResponse")]
        void RemoveSubjectById(int entityToRemoveById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveSubjectById", ReplyAction="http://tempuri.org/IService/RemoveSubjectByIdResponse")]
        System.Threading.Tasks.Task RemoveSubjectByIdAsync(int entityToRemoveById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateSubject", ReplyAction="http://tempuri.org/IService/UpdateSubjectResponse")]
        void UpdateSubject(ConsoleAppForTesting.ServiceReference.Subjects entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateSubject", ReplyAction="http://tempuri.org/IService/UpdateSubjectResponse")]
        System.Threading.Tasks.Task UpdateSubjectAsync(ConsoleAppForTesting.ServiceReference.Subjects entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddSubjectsUser", ReplyAction="http://tempuri.org/IService/AddSubjectsUserResponse")]
        void AddSubjectsUser(ConsoleAppForTesting.ServiceReference.SubjectsUsers entityToAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddSubjectsUser", ReplyAction="http://tempuri.org/IService/AddSubjectsUserResponse")]
        System.Threading.Tasks.Task AddSubjectsUserAsync(ConsoleAppForTesting.ServiceReference.SubjectsUsers entityToAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllSubjectsUsers", ReplyAction="http://tempuri.org/IService/GetAllSubjectsUsersResponse")]
        ConsoleAppForTesting.ServiceReference.SubjectsUsers[] GetAllSubjectsUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllSubjectsUsers", ReplyAction="http://tempuri.org/IService/GetAllSubjectsUsersResponse")]
        System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.SubjectsUsers[]> GetAllSubjectsUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetRegisteredStudentsCount", ReplyAction="http://tempuri.org/IService/GetRegisteredStudentsCountResponse")]
        int GetRegisteredStudentsCount(ConsoleAppForTesting.ServiceReference.Subjects subject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetRegisteredStudentsCount", ReplyAction="http://tempuri.org/IService/GetRegisteredStudentsCountResponse")]
        System.Threading.Tasks.Task<int> GetRegisteredStudentsCountAsync(ConsoleAppForTesting.ServiceReference.Subjects subject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetRegisteredTeachersCount", ReplyAction="http://tempuri.org/IService/GetRegisteredTeachersCountResponse")]
        int GetRegisteredTeachersCount(ConsoleAppForTesting.ServiceReference.Subjects subject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetRegisteredTeachersCount", ReplyAction="http://tempuri.org/IService/GetRegisteredTeachersCountResponse")]
        System.Threading.Tasks.Task<int> GetRegisteredTeachersCountAsync(ConsoleAppForTesting.ServiceReference.Subjects subject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSubjectTeacherName", ReplyAction="http://tempuri.org/IService/GetSubjectTeacherNameResponse")]
        string GetSubjectTeacherName(ConsoleAppForTesting.ServiceReference.Subjects subject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSubjectTeacherName", ReplyAction="http://tempuri.org/IService/GetSubjectTeacherNameResponse")]
        System.Threading.Tasks.Task<string> GetSubjectTeacherNameAsync(ConsoleAppForTesting.ServiceReference.Subjects subject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSubjectsUserById", ReplyAction="http://tempuri.org/IService/GetSubjectsUserByIdResponse")]
        ConsoleAppForTesting.ServiceReference.SubjectsUsers GetSubjectsUserById(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSubjectsUserById", ReplyAction="http://tempuri.org/IService/GetSubjectsUserByIdResponse")]
        System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.SubjectsUsers> GetSubjectsUserByIdAsync(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfSubjectsUser", ReplyAction="http://tempuri.org/IService/GetIdOfSubjectsUserResponse")]
        int GetIdOfSubjectsUser(ConsoleAppForTesting.ServiceReference.SubjectsUsers entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfSubjectsUser", ReplyAction="http://tempuri.org/IService/GetIdOfSubjectsUserResponse")]
        System.Threading.Tasks.Task<int> GetIdOfSubjectsUserAsync(ConsoleAppForTesting.ServiceReference.SubjectsUsers entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RegisterUserToSubject", ReplyAction="http://tempuri.org/IService/RegisterUserToSubjectResponse")]
        void RegisterUserToSubject(ConsoleAppForTesting.ServiceReference.Users user, ConsoleAppForTesting.ServiceReference.Subjects subject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RegisterUserToSubject", ReplyAction="http://tempuri.org/IService/RegisterUserToSubjectResponse")]
        System.Threading.Tasks.Task RegisterUserToSubjectAsync(ConsoleAppForTesting.ServiceReference.Users user, ConsoleAppForTesting.ServiceReference.Subjects subject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveSubjectsUserById", ReplyAction="http://tempuri.org/IService/RemoveSubjectsUserByIdResponse")]
        void RemoveSubjectsUserById(int entityToRemoveById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveSubjectsUserById", ReplyAction="http://tempuri.org/IService/RemoveSubjectsUserByIdResponse")]
        System.Threading.Tasks.Task RemoveSubjectsUserByIdAsync(int entityToRemoveById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateSubjectsUser", ReplyAction="http://tempuri.org/IService/UpdateSubjectsUserResponse")]
        void UpdateSubjectsUser(ConsoleAppForTesting.ServiceReference.SubjectsUsers entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateSubjectsUser", ReplyAction="http://tempuri.org/IService/UpdateSubjectsUserResponse")]
        System.Threading.Tasks.Task UpdateSubjectsUserAsync(ConsoleAppForTesting.ServiceReference.SubjectsUsers entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllTeachers", ReplyAction="http://tempuri.org/IService/GetAllTeachersResponse")]
        ConsoleAppForTesting.ServiceReference.Teachers[] GetAllTeachers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllTeachers", ReplyAction="http://tempuri.org/IService/GetAllTeachersResponse")]
        System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Teachers[]> GetAllTeachersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTeacherById", ReplyAction="http://tempuri.org/IService/GetTeacherByIdResponse")]
        ConsoleAppForTesting.ServiceReference.Teachers GetTeacherById(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTeacherById", ReplyAction="http://tempuri.org/IService/GetTeacherByIdResponse")]
        System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Teachers> GetTeacherByIdAsync(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfTeacher", ReplyAction="http://tempuri.org/IService/GetIdOfTeacherResponse")]
        int GetIdOfTeacher(ConsoleAppForTesting.ServiceReference.Teachers entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfTeacher", ReplyAction="http://tempuri.org/IService/GetIdOfTeacherResponse")]
        System.Threading.Tasks.Task<int> GetIdOfTeacherAsync(ConsoleAppForTesting.ServiceReference.Teachers entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveTeacherById", ReplyAction="http://tempuri.org/IService/RemoveTeacherByIdResponse")]
        void RemoveTeacherById(int entityToRemoveById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveTeacherById", ReplyAction="http://tempuri.org/IService/RemoveTeacherByIdResponse")]
        System.Threading.Tasks.Task RemoveTeacherByIdAsync(int entityToRemoveById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateTeacher", ReplyAction="http://tempuri.org/IService/UpdateTeacherResponse")]
        void UpdateTeacher(ConsoleAppForTesting.ServiceReference.Teachers entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateTeacher", ReplyAction="http://tempuri.org/IService/UpdateTeacherResponse")]
        System.Threading.Tasks.Task UpdateTeacherAsync(ConsoleAppForTesting.ServiceReference.Teachers entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddUser", ReplyAction="http://tempuri.org/IService/AddUserResponse")]
        void AddUser(ConsoleAppForTesting.ServiceReference.Users entityToAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddUser", ReplyAction="http://tempuri.org/IService/AddUserResponse")]
        System.Threading.Tasks.Task AddUserAsync(ConsoleAppForTesting.ServiceReference.Users entityToAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllUsers", ReplyAction="http://tempuri.org/IService/GetAllUsersResponse")]
        ConsoleAppForTesting.ServiceReference.Users[] GetAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllUsers", ReplyAction="http://tempuri.org/IService/GetAllUsersResponse")]
        System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Users[]> GetAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUserById", ReplyAction="http://tempuri.org/IService/GetUserByIdResponse")]
        ConsoleAppForTesting.ServiceReference.Users GetUserById(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUserById", ReplyAction="http://tempuri.org/IService/GetUserByIdResponse")]
        System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Users> GetUserByIdAsync(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfUser", ReplyAction="http://tempuri.org/IService/GetIdOfUserResponse")]
        int GetIdOfUser(ConsoleAppForTesting.ServiceReference.Users entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfUser", ReplyAction="http://tempuri.org/IService/GetIdOfUserResponse")]
        System.Threading.Tasks.Task<int> GetIdOfUserAsync(ConsoleAppForTesting.ServiceReference.Users entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveUserById", ReplyAction="http://tempuri.org/IService/RemoveUserByIdResponse")]
        void RemoveUserById(int entityToRemoveById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveUserById", ReplyAction="http://tempuri.org/IService/RemoveUserByIdResponse")]
        System.Threading.Tasks.Task RemoveUserByIdAsync(int entityToRemoveById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUserId", ReplyAction="http://tempuri.org/IService/GetUserIdResponse")]
        int GetUserId(ConsoleAppForTesting.ServiceReference.Users user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUserId", ReplyAction="http://tempuri.org/IService/GetUserIdResponse")]
        System.Threading.Tasks.Task<int> GetUserIdAsync(ConsoleAppForTesting.ServiceReference.Users user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTeachersFromUsers", ReplyAction="http://tempuri.org/IService/GetTeachersFromUsersResponse")]
        ConsoleAppForTesting.ServiceReference.Users[] GetTeachersFromUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTeachersFromUsers", ReplyAction="http://tempuri.org/IService/GetTeachersFromUsersResponse")]
        System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Users[]> GetTeachersFromUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Login", ReplyAction="http://tempuri.org/IService/LoginResponse")]
        bool Login(string eduId, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Login", ReplyAction="http://tempuri.org/IService/LoginResponse")]
        System.Threading.Tasks.Task<bool> LoginAsync(string eduId, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateUser", ReplyAction="http://tempuri.org/IService/UpdateUserResponse")]
        void UpdateUser(ConsoleAppForTesting.ServiceReference.Users entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateUser", ReplyAction="http://tempuri.org/IService/UpdateUserResponse")]
        System.Threading.Tasks.Task UpdateUserAsync(ConsoleAppForTesting.ServiceReference.Users entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAppInfo", ReplyAction="http://tempuri.org/IService/GetAppInfoResponse")]
        ConsoleAppForTesting.ServiceReference.AppInfo GetAppInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAppInfo", ReplyAction="http://tempuri.org/IService/GetAppInfoResponse")]
        System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.AppInfo> GetAppInfoAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : ConsoleAppForTesting.ServiceReference.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<ConsoleAppForTesting.ServiceReference.IService>, ConsoleAppForTesting.ServiceReference.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ConsoleAppForTesting.ServiceReference.Administrators[] GetAllAdministrators() {
            return base.Channel.GetAllAdministrators();
        }
        
        public System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Administrators[]> GetAllAdministratorsAsync() {
            return base.Channel.GetAllAdministratorsAsync();
        }
        
        public ConsoleAppForTesting.ServiceReference.Administrators GetAdministratorById(int entityToGetById) {
            return base.Channel.GetAdministratorById(entityToGetById);
        }
        
        public System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Administrators> GetAdministratorByIdAsync(int entityToGetById) {
            return base.Channel.GetAdministratorByIdAsync(entityToGetById);
        }
        
        public int GetIdOfAdministrator(ConsoleAppForTesting.ServiceReference.Administrators entityToGetId) {
            return base.Channel.GetIdOfAdministrator(entityToGetId);
        }
        
        public System.Threading.Tasks.Task<int> GetIdOfAdministratorAsync(ConsoleAppForTesting.ServiceReference.Administrators entityToGetId) {
            return base.Channel.GetIdOfAdministratorAsync(entityToGetId);
        }
        
        public void RemoveAdministratorById(int entityToRemoveById) {
            base.Channel.RemoveAdministratorById(entityToRemoveById);
        }
        
        public System.Threading.Tasks.Task RemoveAdministratorByIdAsync(int entityToRemoveById) {
            return base.Channel.RemoveAdministratorByIdAsync(entityToRemoveById);
        }
        
        public void UpdateAdministrator(ConsoleAppForTesting.ServiceReference.Administrators entityToUpdate) {
            base.Channel.UpdateAdministrator(entityToUpdate);
        }
        
        public System.Threading.Tasks.Task UpdateAdministratorAsync(ConsoleAppForTesting.ServiceReference.Administrators entityToUpdate) {
            return base.Channel.UpdateAdministratorAsync(entityToUpdate);
        }
        
        public void AddExam(ConsoleAppForTesting.ServiceReference.Exams entityToAdd) {
            base.Channel.AddExam(entityToAdd);
        }
        
        public System.Threading.Tasks.Task AddExamAsync(ConsoleAppForTesting.ServiceReference.Exams entityToAdd) {
            return base.Channel.AddExamAsync(entityToAdd);
        }
        
        public ConsoleAppForTesting.ServiceReference.Exams[] GetAllExams() {
            return base.Channel.GetAllExams();
        }
        
        public System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Exams[]> GetAllExamsAsync() {
            return base.Channel.GetAllExamsAsync();
        }
        
        public ConsoleAppForTesting.ServiceReference.Exams GetExamById(int entityToGetById) {
            return base.Channel.GetExamById(entityToGetById);
        }
        
        public System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Exams> GetExamByIdAsync(int entityToGetById) {
            return base.Channel.GetExamByIdAsync(entityToGetById);
        }
        
        public int GetIdOfExam(ConsoleAppForTesting.ServiceReference.Exams entityToGetId) {
            return base.Channel.GetIdOfExam(entityToGetId);
        }
        
        public System.Threading.Tasks.Task<int> GetIdOfExamAsync(ConsoleAppForTesting.ServiceReference.Exams entityToGetId) {
            return base.Channel.GetIdOfExamAsync(entityToGetId);
        }
        
        public void RemoveExamById(int entityToRemoveById) {
            base.Channel.RemoveExamById(entityToRemoveById);
        }
        
        public System.Threading.Tasks.Task RemoveExamByIdAsync(int entityToRemoveById) {
            return base.Channel.RemoveExamByIdAsync(entityToRemoveById);
        }
        
        public void UpdateExam(ConsoleAppForTesting.ServiceReference.Exams entityToUpdate) {
            base.Channel.UpdateExam(entityToUpdate);
        }
        
        public System.Threading.Tasks.Task UpdateExamAsync(ConsoleAppForTesting.ServiceReference.Exams entityToUpdate) {
            return base.Channel.UpdateExamAsync(entityToUpdate);
        }
        
        public void AddExamsUser(ConsoleAppForTesting.ServiceReference.ExamsUsers entityToAdd) {
            base.Channel.AddExamsUser(entityToAdd);
        }
        
        public System.Threading.Tasks.Task AddExamsUserAsync(ConsoleAppForTesting.ServiceReference.ExamsUsers entityToAdd) {
            return base.Channel.AddExamsUserAsync(entityToAdd);
        }
        
        public ConsoleAppForTesting.ServiceReference.ExamsUsers[] GetAllExamsUsers() {
            return base.Channel.GetAllExamsUsers();
        }
        
        public System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.ExamsUsers[]> GetAllExamsUsersAsync() {
            return base.Channel.GetAllExamsUsersAsync();
        }
        
        public ConsoleAppForTesting.ServiceReference.ExamsUsers GetExamsUserById(int entityToGetById) {
            return base.Channel.GetExamsUserById(entityToGetById);
        }
        
        public System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.ExamsUsers> GetExamsUserByIdAsync(int entityToGetById) {
            return base.Channel.GetExamsUserByIdAsync(entityToGetById);
        }
        
        public int GetIdOfExamsUser(ConsoleAppForTesting.ServiceReference.ExamsUsers entityToGetId) {
            return base.Channel.GetIdOfExamsUser(entityToGetId);
        }
        
        public System.Threading.Tasks.Task<int> GetIdOfExamsUserAsync(ConsoleAppForTesting.ServiceReference.ExamsUsers entityToGetId) {
            return base.Channel.GetIdOfExamsUserAsync(entityToGetId);
        }
        
        public void RemoveExamsUserById(int entityToRemoveById) {
            base.Channel.RemoveExamsUserById(entityToRemoveById);
        }
        
        public System.Threading.Tasks.Task RemoveExamsUserByIdAsync(int entityToRemoveById) {
            return base.Channel.RemoveExamsUserByIdAsync(entityToRemoveById);
        }
        
        public ConsoleAppForTesting.ServiceReference.Users[] GetExamStudents(int examId) {
            return base.Channel.GetExamStudents(examId);
        }
        
        public System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Users[]> GetExamStudentsAsync(int examId) {
            return base.Channel.GetExamStudentsAsync(examId);
        }
        
        public ConsoleAppForTesting.ServiceReference.Users GetExamTeacher(int examId) {
            return base.Channel.GetExamTeacher(examId);
        }
        
        public System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Users> GetExamTeacherAsync(int examId) {
            return base.Channel.GetExamTeacherAsync(examId);
        }
        
        public void UpdateExamsUser(ConsoleAppForTesting.ServiceReference.ExamsUsers entityToUpdate) {
            base.Channel.UpdateExamsUser(entityToUpdate);
        }
        
        public System.Threading.Tasks.Task UpdateExamsUserAsync(ConsoleAppForTesting.ServiceReference.ExamsUsers entityToUpdate) {
            return base.Channel.UpdateExamsUserAsync(entityToUpdate);
        }
        
        public void AddGrade(ConsoleAppForTesting.ServiceReference.Grades entityToAdd) {
            base.Channel.AddGrade(entityToAdd);
        }
        
        public System.Threading.Tasks.Task AddGradeAsync(ConsoleAppForTesting.ServiceReference.Grades entityToAdd) {
            return base.Channel.AddGradeAsync(entityToAdd);
        }
        
        public ConsoleAppForTesting.ServiceReference.Grades[] GetAllGrades() {
            return base.Channel.GetAllGrades();
        }
        
        public System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Grades[]> GetAllGradesAsync() {
            return base.Channel.GetAllGradesAsync();
        }
        
        public ConsoleAppForTesting.ServiceReference.Grades GetGradeById(int entityToGetById) {
            return base.Channel.GetGradeById(entityToGetById);
        }
        
        public System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Grades> GetGradeByIdAsync(int entityToGetById) {
            return base.Channel.GetGradeByIdAsync(entityToGetById);
        }
        
        public int GetIdOfGrade(ConsoleAppForTesting.ServiceReference.Grades entityToGetId) {
            return base.Channel.GetIdOfGrade(entityToGetId);
        }
        
        public System.Threading.Tasks.Task<int> GetIdOfGradeAsync(ConsoleAppForTesting.ServiceReference.Grades entityToGetId) {
            return base.Channel.GetIdOfGradeAsync(entityToGetId);
        }
        
        public void RemoveGradeById(int entityToRemoveById) {
            base.Channel.RemoveGradeById(entityToRemoveById);
        }
        
        public System.Threading.Tasks.Task RemoveGradeByIdAsync(int entityToRemoveById) {
            return base.Channel.RemoveGradeByIdAsync(entityToRemoveById);
        }
        
        public void UpdateGrade(ConsoleAppForTesting.ServiceReference.Grades entityToUpdate) {
            base.Channel.UpdateGrade(entityToUpdate);
        }
        
        public System.Threading.Tasks.Task UpdateGradeAsync(ConsoleAppForTesting.ServiceReference.Grades entityToUpdate) {
            return base.Channel.UpdateGradeAsync(entityToUpdate);
        }
        
        public ConsoleAppForTesting.ServiceReference.Managers[] GetAllManagers() {
            return base.Channel.GetAllManagers();
        }
        
        public System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Managers[]> GetAllManagersAsync() {
            return base.Channel.GetAllManagersAsync();
        }
        
        public ConsoleAppForTesting.ServiceReference.Managers GetManagerById(int entityToGetById) {
            return base.Channel.GetManagerById(entityToGetById);
        }
        
        public System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Managers> GetManagerByIdAsync(int entityToGetById) {
            return base.Channel.GetManagerByIdAsync(entityToGetById);
        }
        
        public int GetIdOfManager(ConsoleAppForTesting.ServiceReference.Managers entityToGetId) {
            return base.Channel.GetIdOfManager(entityToGetId);
        }
        
        public System.Threading.Tasks.Task<int> GetIdOfManagerAsync(ConsoleAppForTesting.ServiceReference.Managers entityToGetId) {
            return base.Channel.GetIdOfManagerAsync(entityToGetId);
        }
        
        public void RemoveManagerById(int entityToRemoveById) {
            base.Channel.RemoveManagerById(entityToRemoveById);
        }
        
        public System.Threading.Tasks.Task RemoveManagerByIdAsync(int entityToRemoveById) {
            return base.Channel.RemoveManagerByIdAsync(entityToRemoveById);
        }
        
        public void UpdateManager(ConsoleAppForTesting.ServiceReference.Managers entityToUpdate) {
            base.Channel.UpdateManager(entityToUpdate);
        }
        
        public System.Threading.Tasks.Task UpdateManagerAsync(ConsoleAppForTesting.ServiceReference.Managers entityToUpdate) {
            return base.Channel.UpdateManagerAsync(entityToUpdate);
        }
        
        public void AddMessage(ConsoleAppForTesting.ServiceReference.Messages entityToAdd) {
            base.Channel.AddMessage(entityToAdd);
        }
        
        public System.Threading.Tasks.Task AddMessageAsync(ConsoleAppForTesting.ServiceReference.Messages entityToAdd) {
            return base.Channel.AddMessageAsync(entityToAdd);
        }
        
        public ConsoleAppForTesting.ServiceReference.Messages[] GetAllMessages() {
            return base.Channel.GetAllMessages();
        }
        
        public System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Messages[]> GetAllMessagesAsync() {
            return base.Channel.GetAllMessagesAsync();
        }
        
        public ConsoleAppForTesting.ServiceReference.Messages GetMessageById(int entityToGetById) {
            return base.Channel.GetMessageById(entityToGetById);
        }
        
        public System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Messages> GetMessageByIdAsync(int entityToGetById) {
            return base.Channel.GetMessageByIdAsync(entityToGetById);
        }
        
        public int GetIdOfMessage(ConsoleAppForTesting.ServiceReference.Messages entityToGetId) {
            return base.Channel.GetIdOfMessage(entityToGetId);
        }
        
        public System.Threading.Tasks.Task<int> GetIdOfMessageAsync(ConsoleAppForTesting.ServiceReference.Messages entityToGetId) {
            return base.Channel.GetIdOfMessageAsync(entityToGetId);
        }
        
        public ConsoleAppForTesting.ServiceReference.Messages[] GetReceivedMessages(int userId) {
            return base.Channel.GetReceivedMessages(userId);
        }
        
        public System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Messages[]> GetReceivedMessagesAsync(int userId) {
            return base.Channel.GetReceivedMessagesAsync(userId);
        }
        
        public ConsoleAppForTesting.ServiceReference.Messages[] GetSentMessages(int userId) {
            return base.Channel.GetSentMessages(userId);
        }
        
        public System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Messages[]> GetSentMessagesAsync(int userId) {
            return base.Channel.GetSentMessagesAsync(userId);
        }
        
        public void RemoveMessageById(int entityToRemoveById) {
            base.Channel.RemoveMessageById(entityToRemoveById);
        }
        
        public System.Threading.Tasks.Task RemoveMessageByIdAsync(int entityToRemoveById) {
            return base.Channel.RemoveMessageByIdAsync(entityToRemoveById);
        }
        
        public void UpdateMessage(ConsoleAppForTesting.ServiceReference.Messages entityToUpdate) {
            base.Channel.UpdateMessage(entityToUpdate);
        }
        
        public System.Threading.Tasks.Task UpdateMessageAsync(ConsoleAppForTesting.ServiceReference.Messages entityToUpdate) {
            return base.Channel.UpdateMessageAsync(entityToUpdate);
        }
        
        public void AddSemester(ConsoleAppForTesting.ServiceReference.Semesters entityToAdd) {
            base.Channel.AddSemester(entityToAdd);
        }
        
        public System.Threading.Tasks.Task AddSemesterAsync(ConsoleAppForTesting.ServiceReference.Semesters entityToAdd) {
            return base.Channel.AddSemesterAsync(entityToAdd);
        }
        
        public ConsoleAppForTesting.ServiceReference.Semesters[] GetAllSemesters() {
            return base.Channel.GetAllSemesters();
        }
        
        public System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Semesters[]> GetAllSemestersAsync() {
            return base.Channel.GetAllSemestersAsync();
        }
        
        public ConsoleAppForTesting.ServiceReference.Semesters GetSemesterById(int entityToGetById) {
            return base.Channel.GetSemesterById(entityToGetById);
        }
        
        public System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Semesters> GetSemesterByIdAsync(int entityToGetById) {
            return base.Channel.GetSemesterByIdAsync(entityToGetById);
        }
        
        public int GetIdOfSemester(ConsoleAppForTesting.ServiceReference.Semesters entityToGetId) {
            return base.Channel.GetIdOfSemester(entityToGetId);
        }
        
        public System.Threading.Tasks.Task<int> GetIdOfSemesterAsync(ConsoleAppForTesting.ServiceReference.Semesters entityToGetId) {
            return base.Channel.GetIdOfSemesterAsync(entityToGetId);
        }
        
        public void RemoveSemesterById(int entityToRemoveById) {
            base.Channel.RemoveSemesterById(entityToRemoveById);
        }
        
        public System.Threading.Tasks.Task RemoveSemesterByIdAsync(int entityToRemoveById) {
            return base.Channel.RemoveSemesterByIdAsync(entityToRemoveById);
        }
        
        public void UpdateSemester(ConsoleAppForTesting.ServiceReference.Semesters entityToUpdate) {
            base.Channel.UpdateSemester(entityToUpdate);
        }
        
        public System.Threading.Tasks.Task UpdateSemesterAsync(ConsoleAppForTesting.ServiceReference.Semesters entityToUpdate) {
            return base.Channel.UpdateSemesterAsync(entityToUpdate);
        }
        
        public ConsoleAppForTesting.ServiceReference.Students[] GetAllStudents() {
            return base.Channel.GetAllStudents();
        }
        
        public System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Students[]> GetAllStudentsAsync() {
            return base.Channel.GetAllStudentsAsync();
        }
        
        public ConsoleAppForTesting.ServiceReference.Students GetStudentById(int entityToGetById) {
            return base.Channel.GetStudentById(entityToGetById);
        }
        
        public System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Students> GetStudentByIdAsync(int entityToGetById) {
            return base.Channel.GetStudentByIdAsync(entityToGetById);
        }
        
        public int GetIdOfStudent(ConsoleAppForTesting.ServiceReference.Students entityToGetId) {
            return base.Channel.GetIdOfStudent(entityToGetId);
        }
        
        public System.Threading.Tasks.Task<int> GetIdOfStudentAsync(ConsoleAppForTesting.ServiceReference.Students entityToGetId) {
            return base.Channel.GetIdOfStudentAsync(entityToGetId);
        }
        
        public void RemoveStudentById(int entityToRemoveById) {
            base.Channel.RemoveStudentById(entityToRemoveById);
        }
        
        public System.Threading.Tasks.Task RemoveStudentByIdAsync(int entityToRemoveById) {
            return base.Channel.RemoveStudentByIdAsync(entityToRemoveById);
        }
        
        public void UpdateStudent(ConsoleAppForTesting.ServiceReference.Students entityToUpdate) {
            base.Channel.UpdateStudent(entityToUpdate);
        }
        
        public System.Threading.Tasks.Task UpdateStudentAsync(ConsoleAppForTesting.ServiceReference.Students entityToUpdate) {
            return base.Channel.UpdateStudentAsync(entityToUpdate);
        }
        
        public void AddSubject(ConsoleAppForTesting.ServiceReference.Subjects entityToAdd) {
            base.Channel.AddSubject(entityToAdd);
        }
        
        public System.Threading.Tasks.Task AddSubjectAsync(ConsoleAppForTesting.ServiceReference.Subjects entityToAdd) {
            return base.Channel.AddSubjectAsync(entityToAdd);
        }
        
        public ConsoleAppForTesting.ServiceReference.Subjects[] GetAllSubjects() {
            return base.Channel.GetAllSubjects();
        }
        
        public System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Subjects[]> GetAllSubjectsAsync() {
            return base.Channel.GetAllSubjectsAsync();
        }
        
        public ConsoleAppForTesting.ServiceReference.Subjects GetSubjectById(int entityToGetById) {
            return base.Channel.GetSubjectById(entityToGetById);
        }
        
        public System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Subjects> GetSubjectByIdAsync(int entityToGetById) {
            return base.Channel.GetSubjectByIdAsync(entityToGetById);
        }
        
        public int GetIdOfSubject(ConsoleAppForTesting.ServiceReference.Subjects entityToGetId) {
            return base.Channel.GetIdOfSubject(entityToGetId);
        }
        
        public System.Threading.Tasks.Task<int> GetIdOfSubjectAsync(ConsoleAppForTesting.ServiceReference.Subjects entityToGetId) {
            return base.Channel.GetIdOfSubjectAsync(entityToGetId);
        }
        
        public void RemoveSubjectById(int entityToRemoveById) {
            base.Channel.RemoveSubjectById(entityToRemoveById);
        }
        
        public System.Threading.Tasks.Task RemoveSubjectByIdAsync(int entityToRemoveById) {
            return base.Channel.RemoveSubjectByIdAsync(entityToRemoveById);
        }
        
        public void UpdateSubject(ConsoleAppForTesting.ServiceReference.Subjects entityToUpdate) {
            base.Channel.UpdateSubject(entityToUpdate);
        }
        
        public System.Threading.Tasks.Task UpdateSubjectAsync(ConsoleAppForTesting.ServiceReference.Subjects entityToUpdate) {
            return base.Channel.UpdateSubjectAsync(entityToUpdate);
        }
        
        public void AddSubjectsUser(ConsoleAppForTesting.ServiceReference.SubjectsUsers entityToAdd) {
            base.Channel.AddSubjectsUser(entityToAdd);
        }
        
        public System.Threading.Tasks.Task AddSubjectsUserAsync(ConsoleAppForTesting.ServiceReference.SubjectsUsers entityToAdd) {
            return base.Channel.AddSubjectsUserAsync(entityToAdd);
        }
        
        public ConsoleAppForTesting.ServiceReference.SubjectsUsers[] GetAllSubjectsUsers() {
            return base.Channel.GetAllSubjectsUsers();
        }
        
        public System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.SubjectsUsers[]> GetAllSubjectsUsersAsync() {
            return base.Channel.GetAllSubjectsUsersAsync();
        }
        
        public int GetRegisteredStudentsCount(ConsoleAppForTesting.ServiceReference.Subjects subject) {
            return base.Channel.GetRegisteredStudentsCount(subject);
        }
        
        public System.Threading.Tasks.Task<int> GetRegisteredStudentsCountAsync(ConsoleAppForTesting.ServiceReference.Subjects subject) {
            return base.Channel.GetRegisteredStudentsCountAsync(subject);
        }
        
        public int GetRegisteredTeachersCount(ConsoleAppForTesting.ServiceReference.Subjects subject) {
            return base.Channel.GetRegisteredTeachersCount(subject);
        }
        
        public System.Threading.Tasks.Task<int> GetRegisteredTeachersCountAsync(ConsoleAppForTesting.ServiceReference.Subjects subject) {
            return base.Channel.GetRegisteredTeachersCountAsync(subject);
        }
        
        public string GetSubjectTeacherName(ConsoleAppForTesting.ServiceReference.Subjects subject) {
            return base.Channel.GetSubjectTeacherName(subject);
        }
        
        public System.Threading.Tasks.Task<string> GetSubjectTeacherNameAsync(ConsoleAppForTesting.ServiceReference.Subjects subject) {
            return base.Channel.GetSubjectTeacherNameAsync(subject);
        }
        
        public ConsoleAppForTesting.ServiceReference.SubjectsUsers GetSubjectsUserById(int entityToGetById) {
            return base.Channel.GetSubjectsUserById(entityToGetById);
        }
        
        public System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.SubjectsUsers> GetSubjectsUserByIdAsync(int entityToGetById) {
            return base.Channel.GetSubjectsUserByIdAsync(entityToGetById);
        }
        
        public int GetIdOfSubjectsUser(ConsoleAppForTesting.ServiceReference.SubjectsUsers entityToGetId) {
            return base.Channel.GetIdOfSubjectsUser(entityToGetId);
        }
        
        public System.Threading.Tasks.Task<int> GetIdOfSubjectsUserAsync(ConsoleAppForTesting.ServiceReference.SubjectsUsers entityToGetId) {
            return base.Channel.GetIdOfSubjectsUserAsync(entityToGetId);
        }
        
        public void RegisterUserToSubject(ConsoleAppForTesting.ServiceReference.Users user, ConsoleAppForTesting.ServiceReference.Subjects subject) {
            base.Channel.RegisterUserToSubject(user, subject);
        }
        
        public System.Threading.Tasks.Task RegisterUserToSubjectAsync(ConsoleAppForTesting.ServiceReference.Users user, ConsoleAppForTesting.ServiceReference.Subjects subject) {
            return base.Channel.RegisterUserToSubjectAsync(user, subject);
        }
        
        public void RemoveSubjectsUserById(int entityToRemoveById) {
            base.Channel.RemoveSubjectsUserById(entityToRemoveById);
        }
        
        public System.Threading.Tasks.Task RemoveSubjectsUserByIdAsync(int entityToRemoveById) {
            return base.Channel.RemoveSubjectsUserByIdAsync(entityToRemoveById);
        }
        
        public void UpdateSubjectsUser(ConsoleAppForTesting.ServiceReference.SubjectsUsers entityToUpdate) {
            base.Channel.UpdateSubjectsUser(entityToUpdate);
        }
        
        public System.Threading.Tasks.Task UpdateSubjectsUserAsync(ConsoleAppForTesting.ServiceReference.SubjectsUsers entityToUpdate) {
            return base.Channel.UpdateSubjectsUserAsync(entityToUpdate);
        }
        
        public ConsoleAppForTesting.ServiceReference.Teachers[] GetAllTeachers() {
            return base.Channel.GetAllTeachers();
        }
        
        public System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Teachers[]> GetAllTeachersAsync() {
            return base.Channel.GetAllTeachersAsync();
        }
        
        public ConsoleAppForTesting.ServiceReference.Teachers GetTeacherById(int entityToGetById) {
            return base.Channel.GetTeacherById(entityToGetById);
        }
        
        public System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Teachers> GetTeacherByIdAsync(int entityToGetById) {
            return base.Channel.GetTeacherByIdAsync(entityToGetById);
        }
        
        public int GetIdOfTeacher(ConsoleAppForTesting.ServiceReference.Teachers entityToGetId) {
            return base.Channel.GetIdOfTeacher(entityToGetId);
        }
        
        public System.Threading.Tasks.Task<int> GetIdOfTeacherAsync(ConsoleAppForTesting.ServiceReference.Teachers entityToGetId) {
            return base.Channel.GetIdOfTeacherAsync(entityToGetId);
        }
        
        public void RemoveTeacherById(int entityToRemoveById) {
            base.Channel.RemoveTeacherById(entityToRemoveById);
        }
        
        public System.Threading.Tasks.Task RemoveTeacherByIdAsync(int entityToRemoveById) {
            return base.Channel.RemoveTeacherByIdAsync(entityToRemoveById);
        }
        
        public void UpdateTeacher(ConsoleAppForTesting.ServiceReference.Teachers entityToUpdate) {
            base.Channel.UpdateTeacher(entityToUpdate);
        }
        
        public System.Threading.Tasks.Task UpdateTeacherAsync(ConsoleAppForTesting.ServiceReference.Teachers entityToUpdate) {
            return base.Channel.UpdateTeacherAsync(entityToUpdate);
        }
        
        public void AddUser(ConsoleAppForTesting.ServiceReference.Users entityToAdd) {
            base.Channel.AddUser(entityToAdd);
        }
        
        public System.Threading.Tasks.Task AddUserAsync(ConsoleAppForTesting.ServiceReference.Users entityToAdd) {
            return base.Channel.AddUserAsync(entityToAdd);
        }
        
        public ConsoleAppForTesting.ServiceReference.Users[] GetAllUsers() {
            return base.Channel.GetAllUsers();
        }
        
        public System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Users[]> GetAllUsersAsync() {
            return base.Channel.GetAllUsersAsync();
        }
        
        public ConsoleAppForTesting.ServiceReference.Users GetUserById(int entityToGetById) {
            return base.Channel.GetUserById(entityToGetById);
        }
        
        public System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Users> GetUserByIdAsync(int entityToGetById) {
            return base.Channel.GetUserByIdAsync(entityToGetById);
        }
        
        public int GetIdOfUser(ConsoleAppForTesting.ServiceReference.Users entityToGetId) {
            return base.Channel.GetIdOfUser(entityToGetId);
        }
        
        public System.Threading.Tasks.Task<int> GetIdOfUserAsync(ConsoleAppForTesting.ServiceReference.Users entityToGetId) {
            return base.Channel.GetIdOfUserAsync(entityToGetId);
        }
        
        public void RemoveUserById(int entityToRemoveById) {
            base.Channel.RemoveUserById(entityToRemoveById);
        }
        
        public System.Threading.Tasks.Task RemoveUserByIdAsync(int entityToRemoveById) {
            return base.Channel.RemoveUserByIdAsync(entityToRemoveById);
        }
        
        public int GetUserId(ConsoleAppForTesting.ServiceReference.Users user) {
            return base.Channel.GetUserId(user);
        }
        
        public System.Threading.Tasks.Task<int> GetUserIdAsync(ConsoleAppForTesting.ServiceReference.Users user) {
            return base.Channel.GetUserIdAsync(user);
        }
        
        public ConsoleAppForTesting.ServiceReference.Users[] GetTeachersFromUsers() {
            return base.Channel.GetTeachersFromUsers();
        }
        
        public System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.Users[]> GetTeachersFromUsersAsync() {
            return base.Channel.GetTeachersFromUsersAsync();
        }
        
        public bool Login(string eduId, string password) {
            return base.Channel.Login(eduId, password);
        }
        
        public System.Threading.Tasks.Task<bool> LoginAsync(string eduId, string password) {
            return base.Channel.LoginAsync(eduId, password);
        }
        
        public void UpdateUser(ConsoleAppForTesting.ServiceReference.Users entityToUpdate) {
            base.Channel.UpdateUser(entityToUpdate);
        }
        
        public System.Threading.Tasks.Task UpdateUserAsync(ConsoleAppForTesting.ServiceReference.Users entityToUpdate) {
            return base.Channel.UpdateUserAsync(entityToUpdate);
        }
        
        public ConsoleAppForTesting.ServiceReference.AppInfo GetAppInfo() {
            return base.Channel.GetAppInfo();
        }
        
        public System.Threading.Tasks.Task<ConsoleAppForTesting.ServiceReference.AppInfo> GetAppInfoAsync() {
            return base.Channel.GetAppInfoAsync();
        }
    }
}
