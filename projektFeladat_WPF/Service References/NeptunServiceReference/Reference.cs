//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace projektFeladat_WPF.NeptunServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NeptunServiceReference.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllAdministrators", ReplyAction="http://tempuri.org/IService/GetAllAdministratorsResponse")]
        WcfServiceLibrary.Administrators[] GetAllAdministrators();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllAdministrators", ReplyAction="http://tempuri.org/IService/GetAllAdministratorsResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Administrators[]> GetAllAdministratorsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAdministratorById", ReplyAction="http://tempuri.org/IService/GetAdministratorByIdResponse")]
        WcfServiceLibrary.Administrators GetAdministratorById(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAdministratorById", ReplyAction="http://tempuri.org/IService/GetAdministratorByIdResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Administrators> GetAdministratorByIdAsync(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfAdministrator", ReplyAction="http://tempuri.org/IService/GetIdOfAdministratorResponse")]
        int GetIdOfAdministrator(WcfServiceLibrary.Administrators entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfAdministrator", ReplyAction="http://tempuri.org/IService/GetIdOfAdministratorResponse")]
        System.Threading.Tasks.Task<int> GetIdOfAdministratorAsync(WcfServiceLibrary.Administrators entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateAdministrator", ReplyAction="http://tempuri.org/IService/UpdateAdministratorResponse")]
        void UpdateAdministrator(WcfServiceLibrary.Administrators entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateAdministrator", ReplyAction="http://tempuri.org/IService/UpdateAdministratorResponse")]
        System.Threading.Tasks.Task UpdateAdministratorAsync(WcfServiceLibrary.Administrators entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddExam", ReplyAction="http://tempuri.org/IService/AddExamResponse")]
        int AddExam(WcfServiceLibrary.Exams entityToAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddExam", ReplyAction="http://tempuri.org/IService/AddExamResponse")]
        System.Threading.Tasks.Task<int> AddExamAsync(WcfServiceLibrary.Exams entityToAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllExams", ReplyAction="http://tempuri.org/IService/GetAllExamsResponse")]
        WcfServiceLibrary.Exams[] GetAllExams();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllExams", ReplyAction="http://tempuri.org/IService/GetAllExamsResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Exams[]> GetAllExamsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetExamById", ReplyAction="http://tempuri.org/IService/GetExamByIdResponse")]
        WcfServiceLibrary.Exams GetExamById(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetExamById", ReplyAction="http://tempuri.org/IService/GetExamByIdResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Exams> GetExamByIdAsync(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfExam", ReplyAction="http://tempuri.org/IService/GetIdOfExamResponse")]
        int GetIdOfExam(WcfServiceLibrary.Exams entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfExam", ReplyAction="http://tempuri.org/IService/GetIdOfExamResponse")]
        System.Threading.Tasks.Task<int> GetIdOfExamAsync(WcfServiceLibrary.Exams entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveExamById", ReplyAction="http://tempuri.org/IService/RemoveExamByIdResponse")]
        void RemoveExamById(int entityToRemoveById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveExamById", ReplyAction="http://tempuri.org/IService/RemoveExamByIdResponse")]
        System.Threading.Tasks.Task RemoveExamByIdAsync(int entityToRemoveById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateExam", ReplyAction="http://tempuri.org/IService/UpdateExamResponse")]
        void UpdateExam(WcfServiceLibrary.Exams entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateExam", ReplyAction="http://tempuri.org/IService/UpdateExamResponse")]
        System.Threading.Tasks.Task UpdateExamAsync(WcfServiceLibrary.Exams entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddExamsUser", ReplyAction="http://tempuri.org/IService/AddExamsUserResponse")]
        int AddExamsUser(WcfServiceLibrary.ExamsUsers entityToAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddExamsUser", ReplyAction="http://tempuri.org/IService/AddExamsUserResponse")]
        System.Threading.Tasks.Task<int> AddExamsUserAsync(WcfServiceLibrary.ExamsUsers entityToAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllExamsUsers", ReplyAction="http://tempuri.org/IService/GetAllExamsUsersResponse")]
        WcfServiceLibrary.ExamsUsers[] GetAllExamsUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllExamsUsers", ReplyAction="http://tempuri.org/IService/GetAllExamsUsersResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.ExamsUsers[]> GetAllExamsUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetExamsUserById", ReplyAction="http://tempuri.org/IService/GetExamsUserByIdResponse")]
        WcfServiceLibrary.ExamsUsers GetExamsUserById(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetExamsUserById", ReplyAction="http://tempuri.org/IService/GetExamsUserByIdResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.ExamsUsers> GetExamsUserByIdAsync(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfExamsUser", ReplyAction="http://tempuri.org/IService/GetIdOfExamsUserResponse")]
        int GetIdOfExamsUser(WcfServiceLibrary.ExamsUsers entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfExamsUser", ReplyAction="http://tempuri.org/IService/GetIdOfExamsUserResponse")]
        System.Threading.Tasks.Task<int> GetIdOfExamsUserAsync(WcfServiceLibrary.ExamsUsers entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveExamsUserById", ReplyAction="http://tempuri.org/IService/RemoveExamsUserByIdResponse")]
        void RemoveExamsUserById(int entityToRemoveById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveExamsUserById", ReplyAction="http://tempuri.org/IService/RemoveExamsUserByIdResponse")]
        System.Threading.Tasks.Task RemoveExamsUserByIdAsync(int entityToRemoveById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetExamStudents", ReplyAction="http://tempuri.org/IService/GetExamStudentsResponse")]
        WcfServiceLibrary.Users[] GetExamStudents(int examId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetExamStudents", ReplyAction="http://tempuri.org/IService/GetExamStudentsResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Users[]> GetExamStudentsAsync(int examId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetExamTeacher", ReplyAction="http://tempuri.org/IService/GetExamTeacherResponse")]
        WcfServiceLibrary.Users GetExamTeacher(int examId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetExamTeacher", ReplyAction="http://tempuri.org/IService/GetExamTeacherResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Users> GetExamTeacherAsync(int examId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateExamsUser", ReplyAction="http://tempuri.org/IService/UpdateExamsUserResponse")]
        void UpdateExamsUser(WcfServiceLibrary.ExamsUsers entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateExamsUser", ReplyAction="http://tempuri.org/IService/UpdateExamsUserResponse")]
        System.Threading.Tasks.Task UpdateExamsUserAsync(WcfServiceLibrary.ExamsUsers entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddGrade", ReplyAction="http://tempuri.org/IService/AddGradeResponse")]
        int AddGrade(WcfServiceLibrary.Grades entityToAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddGrade", ReplyAction="http://tempuri.org/IService/AddGradeResponse")]
        System.Threading.Tasks.Task<int> AddGradeAsync(WcfServiceLibrary.Grades entityToAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllGrades", ReplyAction="http://tempuri.org/IService/GetAllGradesResponse")]
        WcfServiceLibrary.Grades[] GetAllGrades();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllGrades", ReplyAction="http://tempuri.org/IService/GetAllGradesResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Grades[]> GetAllGradesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetGradeById", ReplyAction="http://tempuri.org/IService/GetGradeByIdResponse")]
        WcfServiceLibrary.Grades GetGradeById(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetGradeById", ReplyAction="http://tempuri.org/IService/GetGradeByIdResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Grades> GetGradeByIdAsync(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfGrade", ReplyAction="http://tempuri.org/IService/GetIdOfGradeResponse")]
        int GetIdOfGrade(WcfServiceLibrary.Grades entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfGrade", ReplyAction="http://tempuri.org/IService/GetIdOfGradeResponse")]
        System.Threading.Tasks.Task<int> GetIdOfGradeAsync(WcfServiceLibrary.Grades entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveGradeById", ReplyAction="http://tempuri.org/IService/RemoveGradeByIdResponse")]
        void RemoveGradeById(int entityToRemoveById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveGradeById", ReplyAction="http://tempuri.org/IService/RemoveGradeByIdResponse")]
        System.Threading.Tasks.Task RemoveGradeByIdAsync(int entityToRemoveById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateGrade", ReplyAction="http://tempuri.org/IService/UpdateGradeResponse")]
        void UpdateGrade(WcfServiceLibrary.Grades entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateGrade", ReplyAction="http://tempuri.org/IService/UpdateGradeResponse")]
        System.Threading.Tasks.Task UpdateGradeAsync(WcfServiceLibrary.Grades entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllManagers", ReplyAction="http://tempuri.org/IService/GetAllManagersResponse")]
        WcfServiceLibrary.Managers[] GetAllManagers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllManagers", ReplyAction="http://tempuri.org/IService/GetAllManagersResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Managers[]> GetAllManagersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetManagerById", ReplyAction="http://tempuri.org/IService/GetManagerByIdResponse")]
        WcfServiceLibrary.Managers GetManagerById(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetManagerById", ReplyAction="http://tempuri.org/IService/GetManagerByIdResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Managers> GetManagerByIdAsync(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfManager", ReplyAction="http://tempuri.org/IService/GetIdOfManagerResponse")]
        int GetIdOfManager(WcfServiceLibrary.Managers entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfManager", ReplyAction="http://tempuri.org/IService/GetIdOfManagerResponse")]
        System.Threading.Tasks.Task<int> GetIdOfManagerAsync(WcfServiceLibrary.Managers entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateManager", ReplyAction="http://tempuri.org/IService/UpdateManagerResponse")]
        void UpdateManager(WcfServiceLibrary.Managers entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateManager", ReplyAction="http://tempuri.org/IService/UpdateManagerResponse")]
        System.Threading.Tasks.Task UpdateManagerAsync(WcfServiceLibrary.Managers entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddMessage", ReplyAction="http://tempuri.org/IService/AddMessageResponse")]
        int AddMessage(WcfServiceLibrary.Messages entityToAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddMessage", ReplyAction="http://tempuri.org/IService/AddMessageResponse")]
        System.Threading.Tasks.Task<int> AddMessageAsync(WcfServiceLibrary.Messages entityToAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllMessages", ReplyAction="http://tempuri.org/IService/GetAllMessagesResponse")]
        WcfServiceLibrary.Messages[] GetAllMessages();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllMessages", ReplyAction="http://tempuri.org/IService/GetAllMessagesResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Messages[]> GetAllMessagesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMessageById", ReplyAction="http://tempuri.org/IService/GetMessageByIdResponse")]
        WcfServiceLibrary.Messages GetMessageById(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMessageById", ReplyAction="http://tempuri.org/IService/GetMessageByIdResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Messages> GetMessageByIdAsync(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfMessage", ReplyAction="http://tempuri.org/IService/GetIdOfMessageResponse")]
        int GetIdOfMessage(WcfServiceLibrary.Messages entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfMessage", ReplyAction="http://tempuri.org/IService/GetIdOfMessageResponse")]
        System.Threading.Tasks.Task<int> GetIdOfMessageAsync(WcfServiceLibrary.Messages entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetReceivedMessages", ReplyAction="http://tempuri.org/IService/GetReceivedMessagesResponse")]
        WcfServiceLibrary.Messages[] GetReceivedMessages(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetReceivedMessages", ReplyAction="http://tempuri.org/IService/GetReceivedMessagesResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Messages[]> GetReceivedMessagesAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSentMessages", ReplyAction="http://tempuri.org/IService/GetSentMessagesResponse")]
        WcfServiceLibrary.Messages[] GetSentMessages(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSentMessages", ReplyAction="http://tempuri.org/IService/GetSentMessagesResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Messages[]> GetSentMessagesAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveMessageById", ReplyAction="http://tempuri.org/IService/RemoveMessageByIdResponse")]
        void RemoveMessageById(int entityToRemoveById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveMessageById", ReplyAction="http://tempuri.org/IService/RemoveMessageByIdResponse")]
        System.Threading.Tasks.Task RemoveMessageByIdAsync(int entityToRemoveById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateMessage", ReplyAction="http://tempuri.org/IService/UpdateMessageResponse")]
        void UpdateMessage(WcfServiceLibrary.Messages entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateMessage", ReplyAction="http://tempuri.org/IService/UpdateMessageResponse")]
        System.Threading.Tasks.Task UpdateMessageAsync(WcfServiceLibrary.Messages entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddSemester", ReplyAction="http://tempuri.org/IService/AddSemesterResponse")]
        int AddSemester(WcfServiceLibrary.Semesters entityToAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddSemester", ReplyAction="http://tempuri.org/IService/AddSemesterResponse")]
        System.Threading.Tasks.Task<int> AddSemesterAsync(WcfServiceLibrary.Semesters entityToAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllSemesters", ReplyAction="http://tempuri.org/IService/GetAllSemestersResponse")]
        WcfServiceLibrary.Semesters[] GetAllSemesters();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllSemesters", ReplyAction="http://tempuri.org/IService/GetAllSemestersResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Semesters[]> GetAllSemestersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSemesterById", ReplyAction="http://tempuri.org/IService/GetSemesterByIdResponse")]
        WcfServiceLibrary.Semesters GetSemesterById(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSemesterById", ReplyAction="http://tempuri.org/IService/GetSemesterByIdResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Semesters> GetSemesterByIdAsync(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfSemester", ReplyAction="http://tempuri.org/IService/GetIdOfSemesterResponse")]
        int GetIdOfSemester(WcfServiceLibrary.Semesters entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfSemester", ReplyAction="http://tempuri.org/IService/GetIdOfSemesterResponse")]
        System.Threading.Tasks.Task<int> GetIdOfSemesterAsync(WcfServiceLibrary.Semesters entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveSemesterById", ReplyAction="http://tempuri.org/IService/RemoveSemesterByIdResponse")]
        void RemoveSemesterById(int entityToRemoveById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveSemesterById", ReplyAction="http://tempuri.org/IService/RemoveSemesterByIdResponse")]
        System.Threading.Tasks.Task RemoveSemesterByIdAsync(int entityToRemoveById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateSemester", ReplyAction="http://tempuri.org/IService/UpdateSemesterResponse")]
        void UpdateSemester(WcfServiceLibrary.Semesters entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateSemester", ReplyAction="http://tempuri.org/IService/UpdateSemesterResponse")]
        System.Threading.Tasks.Task UpdateSemesterAsync(WcfServiceLibrary.Semesters entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllStudents", ReplyAction="http://tempuri.org/IService/GetAllStudentsResponse")]
        WcfServiceLibrary.Students[] GetAllStudents();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllStudents", ReplyAction="http://tempuri.org/IService/GetAllStudentsResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Students[]> GetAllStudentsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetStudentById", ReplyAction="http://tempuri.org/IService/GetStudentByIdResponse")]
        WcfServiceLibrary.Students GetStudentById(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetStudentById", ReplyAction="http://tempuri.org/IService/GetStudentByIdResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Students> GetStudentByIdAsync(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfStudent", ReplyAction="http://tempuri.org/IService/GetIdOfStudentResponse")]
        int GetIdOfStudent(WcfServiceLibrary.Students entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfStudent", ReplyAction="http://tempuri.org/IService/GetIdOfStudentResponse")]
        System.Threading.Tasks.Task<int> GetIdOfStudentAsync(WcfServiceLibrary.Students entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateStudent", ReplyAction="http://tempuri.org/IService/UpdateStudentResponse")]
        void UpdateStudent(WcfServiceLibrary.Students entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateStudent", ReplyAction="http://tempuri.org/IService/UpdateStudentResponse")]
        System.Threading.Tasks.Task UpdateStudentAsync(WcfServiceLibrary.Students entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddSubject", ReplyAction="http://tempuri.org/IService/AddSubjectResponse")]
        int AddSubject(WcfServiceLibrary.Subjects entityToAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddSubject", ReplyAction="http://tempuri.org/IService/AddSubjectResponse")]
        System.Threading.Tasks.Task<int> AddSubjectAsync(WcfServiceLibrary.Subjects entityToAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllSubjects", ReplyAction="http://tempuri.org/IService/GetAllSubjectsResponse")]
        WcfServiceLibrary.Subjects[] GetAllSubjects();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllSubjects", ReplyAction="http://tempuri.org/IService/GetAllSubjectsResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Subjects[]> GetAllSubjectsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSubjectById", ReplyAction="http://tempuri.org/IService/GetSubjectByIdResponse")]
        WcfServiceLibrary.Subjects GetSubjectById(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSubjectById", ReplyAction="http://tempuri.org/IService/GetSubjectByIdResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Subjects> GetSubjectByIdAsync(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfSubject", ReplyAction="http://tempuri.org/IService/GetIdOfSubjectResponse")]
        int GetIdOfSubject(WcfServiceLibrary.Subjects entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfSubject", ReplyAction="http://tempuri.org/IService/GetIdOfSubjectResponse")]
        System.Threading.Tasks.Task<int> GetIdOfSubjectAsync(WcfServiceLibrary.Subjects entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveSubjectById", ReplyAction="http://tempuri.org/IService/RemoveSubjectByIdResponse")]
        void RemoveSubjectById(int entityToRemoveById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveSubjectById", ReplyAction="http://tempuri.org/IService/RemoveSubjectByIdResponse")]
        System.Threading.Tasks.Task RemoveSubjectByIdAsync(int entityToRemoveById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateSubject", ReplyAction="http://tempuri.org/IService/UpdateSubjectResponse")]
        void UpdateSubject(WcfServiceLibrary.Subjects entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateSubject", ReplyAction="http://tempuri.org/IService/UpdateSubjectResponse")]
        System.Threading.Tasks.Task UpdateSubjectAsync(WcfServiceLibrary.Subjects entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddSubjectsUser", ReplyAction="http://tempuri.org/IService/AddSubjectsUserResponse")]
        int AddSubjectsUser(WcfServiceLibrary.SubjectsUsers entityToAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddSubjectsUser", ReplyAction="http://tempuri.org/IService/AddSubjectsUserResponse")]
        System.Threading.Tasks.Task<int> AddSubjectsUserAsync(WcfServiceLibrary.SubjectsUsers entityToAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllSubjectsUsers", ReplyAction="http://tempuri.org/IService/GetAllSubjectsUsersResponse")]
        WcfServiceLibrary.SubjectsUsers[] GetAllSubjectsUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllSubjectsUsers", ReplyAction="http://tempuri.org/IService/GetAllSubjectsUsersResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.SubjectsUsers[]> GetAllSubjectsUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetRegisteredStudentsCount", ReplyAction="http://tempuri.org/IService/GetRegisteredStudentsCountResponse")]
        int GetRegisteredStudentsCount(WcfServiceLibrary.Subjects subject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetRegisteredStudentsCount", ReplyAction="http://tempuri.org/IService/GetRegisteredStudentsCountResponse")]
        System.Threading.Tasks.Task<int> GetRegisteredStudentsCountAsync(WcfServiceLibrary.Subjects subject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetRegisteredTeachersCount", ReplyAction="http://tempuri.org/IService/GetRegisteredTeachersCountResponse")]
        int GetRegisteredTeachersCount(WcfServiceLibrary.Subjects subject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetRegisteredTeachersCount", ReplyAction="http://tempuri.org/IService/GetRegisteredTeachersCountResponse")]
        System.Threading.Tasks.Task<int> GetRegisteredTeachersCountAsync(WcfServiceLibrary.Subjects subject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSubjectTeacher", ReplyAction="http://tempuri.org/IService/GetSubjectTeacherResponse")]
        WcfServiceLibrary.Users GetSubjectTeacher(WcfServiceLibrary.Subjects subject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSubjectTeacher", ReplyAction="http://tempuri.org/IService/GetSubjectTeacherResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Users> GetSubjectTeacherAsync(WcfServiceLibrary.Subjects subject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSubjectsUserById", ReplyAction="http://tempuri.org/IService/GetSubjectsUserByIdResponse")]
        WcfServiceLibrary.SubjectsUsers GetSubjectsUserById(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSubjectsUserById", ReplyAction="http://tempuri.org/IService/GetSubjectsUserByIdResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.SubjectsUsers> GetSubjectsUserByIdAsync(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfSubjectsUser", ReplyAction="http://tempuri.org/IService/GetIdOfSubjectsUserResponse")]
        int GetIdOfSubjectsUser(WcfServiceLibrary.SubjectsUsers entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfSubjectsUser", ReplyAction="http://tempuri.org/IService/GetIdOfSubjectsUserResponse")]
        System.Threading.Tasks.Task<int> GetIdOfSubjectsUserAsync(WcfServiceLibrary.SubjectsUsers entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RegisterUserToSubject", ReplyAction="http://tempuri.org/IService/RegisterUserToSubjectResponse")]
        void RegisterUserToSubject(WcfServiceLibrary.Users user, WcfServiceLibrary.Subjects subject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RegisterUserToSubject", ReplyAction="http://tempuri.org/IService/RegisterUserToSubjectResponse")]
        System.Threading.Tasks.Task RegisterUserToSubjectAsync(WcfServiceLibrary.Users user, WcfServiceLibrary.Subjects subject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveSubjectsUserById", ReplyAction="http://tempuri.org/IService/RemoveSubjectsUserByIdResponse")]
        void RemoveSubjectsUserById(int entityToRemoveById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveSubjectsUserById", ReplyAction="http://tempuri.org/IService/RemoveSubjectsUserByIdResponse")]
        System.Threading.Tasks.Task RemoveSubjectsUserByIdAsync(int entityToRemoveById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateSubjectsUser", ReplyAction="http://tempuri.org/IService/UpdateSubjectsUserResponse")]
        void UpdateSubjectsUser(WcfServiceLibrary.SubjectsUsers entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateSubjectsUser", ReplyAction="http://tempuri.org/IService/UpdateSubjectsUserResponse")]
        System.Threading.Tasks.Task UpdateSubjectsUserAsync(WcfServiceLibrary.SubjectsUsers entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllTeachers", ReplyAction="http://tempuri.org/IService/GetAllTeachersResponse")]
        WcfServiceLibrary.Teachers[] GetAllTeachers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllTeachers", ReplyAction="http://tempuri.org/IService/GetAllTeachersResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Teachers[]> GetAllTeachersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTeacherById", ReplyAction="http://tempuri.org/IService/GetTeacherByIdResponse")]
        WcfServiceLibrary.Teachers GetTeacherById(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTeacherById", ReplyAction="http://tempuri.org/IService/GetTeacherByIdResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Teachers> GetTeacherByIdAsync(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfTeacher", ReplyAction="http://tempuri.org/IService/GetIdOfTeacherResponse")]
        int GetIdOfTeacher(WcfServiceLibrary.Teachers entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfTeacher", ReplyAction="http://tempuri.org/IService/GetIdOfTeacherResponse")]
        System.Threading.Tasks.Task<int> GetIdOfTeacherAsync(WcfServiceLibrary.Teachers entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateTeacher", ReplyAction="http://tempuri.org/IService/UpdateTeacherResponse")]
        void UpdateTeacher(WcfServiceLibrary.Teachers entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateTeacher", ReplyAction="http://tempuri.org/IService/UpdateTeacherResponse")]
        System.Threading.Tasks.Task UpdateTeacherAsync(WcfServiceLibrary.Teachers entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddUser", ReplyAction="http://tempuri.org/IService/AddUserResponse")]
        int AddUser(WcfServiceLibrary.Users entityToAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddUser", ReplyAction="http://tempuri.org/IService/AddUserResponse")]
        System.Threading.Tasks.Task<int> AddUserAsync(WcfServiceLibrary.Users entityToAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllUsers", ReplyAction="http://tempuri.org/IService/GetAllUsersResponse")]
        WcfServiceLibrary.Users[] GetAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllUsers", ReplyAction="http://tempuri.org/IService/GetAllUsersResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Users[]> GetAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUserById", ReplyAction="http://tempuri.org/IService/GetUserByIdResponse")]
        WcfServiceLibrary.Users GetUserById(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUserById", ReplyAction="http://tempuri.org/IService/GetUserByIdResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Users> GetUserByIdAsync(int entityToGetById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfUser", ReplyAction="http://tempuri.org/IService/GetIdOfUserResponse")]
        int GetIdOfUser(WcfServiceLibrary.Users entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIdOfUser", ReplyAction="http://tempuri.org/IService/GetIdOfUserResponse")]
        System.Threading.Tasks.Task<int> GetIdOfUserAsync(WcfServiceLibrary.Users entityToGetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveUserById", ReplyAction="http://tempuri.org/IService/RemoveUserByIdResponse")]
        void RemoveUserById(int entityToRemoveById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveUserById", ReplyAction="http://tempuri.org/IService/RemoveUserByIdResponse")]
        System.Threading.Tasks.Task RemoveUserByIdAsync(int entityToRemoveById);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUserId", ReplyAction="http://tempuri.org/IService/GetUserIdResponse")]
        int GetUserId(WcfServiceLibrary.Users user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUserId", ReplyAction="http://tempuri.org/IService/GetUserIdResponse")]
        System.Threading.Tasks.Task<int> GetUserIdAsync(WcfServiceLibrary.Users user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTeachersFromUsers", ReplyAction="http://tempuri.org/IService/GetTeachersFromUsersResponse")]
        WcfServiceLibrary.Users[] GetTeachersFromUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTeachersFromUsers", ReplyAction="http://tempuri.org/IService/GetTeachersFromUsersResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Users[]> GetTeachersFromUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Login", ReplyAction="http://tempuri.org/IService/LoginResponse")]
        bool Login(string eduId, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Login", ReplyAction="http://tempuri.org/IService/LoginResponse")]
        System.Threading.Tasks.Task<bool> LoginAsync(string eduId, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateUser", ReplyAction="http://tempuri.org/IService/UpdateUserResponse")]
        void UpdateUser(WcfServiceLibrary.Users entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateUser", ReplyAction="http://tempuri.org/IService/UpdateUserResponse")]
        System.Threading.Tasks.Task UpdateUserAsync(WcfServiceLibrary.Users entityToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAppInfo", ReplyAction="http://tempuri.org/IService/GetAppInfoResponse")]
        WcfServiceLibrary.AppInfo GetAppInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAppInfo", ReplyAction="http://tempuri.org/IService/GetAppInfoResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.AppInfo> GetAppInfoAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : projektFeladat_WPF.NeptunServiceReference.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<projektFeladat_WPF.NeptunServiceReference.IService>, projektFeladat_WPF.NeptunServiceReference.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WcfServiceLibrary.Administrators[] GetAllAdministrators() {
            return base.Channel.GetAllAdministrators();
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Administrators[]> GetAllAdministratorsAsync() {
            return base.Channel.GetAllAdministratorsAsync();
        }
        
        public WcfServiceLibrary.Administrators GetAdministratorById(int entityToGetById) {
            return base.Channel.GetAdministratorById(entityToGetById);
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Administrators> GetAdministratorByIdAsync(int entityToGetById) {
            return base.Channel.GetAdministratorByIdAsync(entityToGetById);
        }
        
        public int GetIdOfAdministrator(WcfServiceLibrary.Administrators entityToGetId) {
            return base.Channel.GetIdOfAdministrator(entityToGetId);
        }
        
        public System.Threading.Tasks.Task<int> GetIdOfAdministratorAsync(WcfServiceLibrary.Administrators entityToGetId) {
            return base.Channel.GetIdOfAdministratorAsync(entityToGetId);
        }
        
        public void UpdateAdministrator(WcfServiceLibrary.Administrators entityToUpdate) {
            base.Channel.UpdateAdministrator(entityToUpdate);
        }
        
        public System.Threading.Tasks.Task UpdateAdministratorAsync(WcfServiceLibrary.Administrators entityToUpdate) {
            return base.Channel.UpdateAdministratorAsync(entityToUpdate);
        }
        
        public int AddExam(WcfServiceLibrary.Exams entityToAdd) {
            return base.Channel.AddExam(entityToAdd);
        }
        
        public System.Threading.Tasks.Task<int> AddExamAsync(WcfServiceLibrary.Exams entityToAdd) {
            return base.Channel.AddExamAsync(entityToAdd);
        }
        
        public WcfServiceLibrary.Exams[] GetAllExams() {
            return base.Channel.GetAllExams();
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Exams[]> GetAllExamsAsync() {
            return base.Channel.GetAllExamsAsync();
        }
        
        public WcfServiceLibrary.Exams GetExamById(int entityToGetById) {
            return base.Channel.GetExamById(entityToGetById);
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Exams> GetExamByIdAsync(int entityToGetById) {
            return base.Channel.GetExamByIdAsync(entityToGetById);
        }
        
        public int GetIdOfExam(WcfServiceLibrary.Exams entityToGetId) {
            return base.Channel.GetIdOfExam(entityToGetId);
        }
        
        public System.Threading.Tasks.Task<int> GetIdOfExamAsync(WcfServiceLibrary.Exams entityToGetId) {
            return base.Channel.GetIdOfExamAsync(entityToGetId);
        }
        
        public void RemoveExamById(int entityToRemoveById) {
            base.Channel.RemoveExamById(entityToRemoveById);
        }
        
        public System.Threading.Tasks.Task RemoveExamByIdAsync(int entityToRemoveById) {
            return base.Channel.RemoveExamByIdAsync(entityToRemoveById);
        }
        
        public void UpdateExam(WcfServiceLibrary.Exams entityToUpdate) {
            base.Channel.UpdateExam(entityToUpdate);
        }
        
        public System.Threading.Tasks.Task UpdateExamAsync(WcfServiceLibrary.Exams entityToUpdate) {
            return base.Channel.UpdateExamAsync(entityToUpdate);
        }
        
        public int AddExamsUser(WcfServiceLibrary.ExamsUsers entityToAdd) {
            return base.Channel.AddExamsUser(entityToAdd);
        }
        
        public System.Threading.Tasks.Task<int> AddExamsUserAsync(WcfServiceLibrary.ExamsUsers entityToAdd) {
            return base.Channel.AddExamsUserAsync(entityToAdd);
        }
        
        public WcfServiceLibrary.ExamsUsers[] GetAllExamsUsers() {
            return base.Channel.GetAllExamsUsers();
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.ExamsUsers[]> GetAllExamsUsersAsync() {
            return base.Channel.GetAllExamsUsersAsync();
        }
        
        public WcfServiceLibrary.ExamsUsers GetExamsUserById(int entityToGetById) {
            return base.Channel.GetExamsUserById(entityToGetById);
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.ExamsUsers> GetExamsUserByIdAsync(int entityToGetById) {
            return base.Channel.GetExamsUserByIdAsync(entityToGetById);
        }
        
        public int GetIdOfExamsUser(WcfServiceLibrary.ExamsUsers entityToGetId) {
            return base.Channel.GetIdOfExamsUser(entityToGetId);
        }
        
        public System.Threading.Tasks.Task<int> GetIdOfExamsUserAsync(WcfServiceLibrary.ExamsUsers entityToGetId) {
            return base.Channel.GetIdOfExamsUserAsync(entityToGetId);
        }
        
        public void RemoveExamsUserById(int entityToRemoveById) {
            base.Channel.RemoveExamsUserById(entityToRemoveById);
        }
        
        public System.Threading.Tasks.Task RemoveExamsUserByIdAsync(int entityToRemoveById) {
            return base.Channel.RemoveExamsUserByIdAsync(entityToRemoveById);
        }
        
        public WcfServiceLibrary.Users[] GetExamStudents(int examId) {
            return base.Channel.GetExamStudents(examId);
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Users[]> GetExamStudentsAsync(int examId) {
            return base.Channel.GetExamStudentsAsync(examId);
        }
        
        public WcfServiceLibrary.Users GetExamTeacher(int examId) {
            return base.Channel.GetExamTeacher(examId);
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Users> GetExamTeacherAsync(int examId) {
            return base.Channel.GetExamTeacherAsync(examId);
        }
        
        public void UpdateExamsUser(WcfServiceLibrary.ExamsUsers entityToUpdate) {
            base.Channel.UpdateExamsUser(entityToUpdate);
        }
        
        public System.Threading.Tasks.Task UpdateExamsUserAsync(WcfServiceLibrary.ExamsUsers entityToUpdate) {
            return base.Channel.UpdateExamsUserAsync(entityToUpdate);
        }
        
        public int AddGrade(WcfServiceLibrary.Grades entityToAdd) {
            return base.Channel.AddGrade(entityToAdd);
        }
        
        public System.Threading.Tasks.Task<int> AddGradeAsync(WcfServiceLibrary.Grades entityToAdd) {
            return base.Channel.AddGradeAsync(entityToAdd);
        }
        
        public WcfServiceLibrary.Grades[] GetAllGrades() {
            return base.Channel.GetAllGrades();
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Grades[]> GetAllGradesAsync() {
            return base.Channel.GetAllGradesAsync();
        }
        
        public WcfServiceLibrary.Grades GetGradeById(int entityToGetById) {
            return base.Channel.GetGradeById(entityToGetById);
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Grades> GetGradeByIdAsync(int entityToGetById) {
            return base.Channel.GetGradeByIdAsync(entityToGetById);
        }
        
        public int GetIdOfGrade(WcfServiceLibrary.Grades entityToGetId) {
            return base.Channel.GetIdOfGrade(entityToGetId);
        }
        
        public System.Threading.Tasks.Task<int> GetIdOfGradeAsync(WcfServiceLibrary.Grades entityToGetId) {
            return base.Channel.GetIdOfGradeAsync(entityToGetId);
        }
        
        public void RemoveGradeById(int entityToRemoveById) {
            base.Channel.RemoveGradeById(entityToRemoveById);
        }
        
        public System.Threading.Tasks.Task RemoveGradeByIdAsync(int entityToRemoveById) {
            return base.Channel.RemoveGradeByIdAsync(entityToRemoveById);
        }
        
        public void UpdateGrade(WcfServiceLibrary.Grades entityToUpdate) {
            base.Channel.UpdateGrade(entityToUpdate);
        }
        
        public System.Threading.Tasks.Task UpdateGradeAsync(WcfServiceLibrary.Grades entityToUpdate) {
            return base.Channel.UpdateGradeAsync(entityToUpdate);
        }
        
        public WcfServiceLibrary.Managers[] GetAllManagers() {
            return base.Channel.GetAllManagers();
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Managers[]> GetAllManagersAsync() {
            return base.Channel.GetAllManagersAsync();
        }
        
        public WcfServiceLibrary.Managers GetManagerById(int entityToGetById) {
            return base.Channel.GetManagerById(entityToGetById);
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Managers> GetManagerByIdAsync(int entityToGetById) {
            return base.Channel.GetManagerByIdAsync(entityToGetById);
        }
        
        public int GetIdOfManager(WcfServiceLibrary.Managers entityToGetId) {
            return base.Channel.GetIdOfManager(entityToGetId);
        }
        
        public System.Threading.Tasks.Task<int> GetIdOfManagerAsync(WcfServiceLibrary.Managers entityToGetId) {
            return base.Channel.GetIdOfManagerAsync(entityToGetId);
        }
        
        public void UpdateManager(WcfServiceLibrary.Managers entityToUpdate) {
            base.Channel.UpdateManager(entityToUpdate);
        }
        
        public System.Threading.Tasks.Task UpdateManagerAsync(WcfServiceLibrary.Managers entityToUpdate) {
            return base.Channel.UpdateManagerAsync(entityToUpdate);
        }
        
        public int AddMessage(WcfServiceLibrary.Messages entityToAdd) {
            return base.Channel.AddMessage(entityToAdd);
        }
        
        public System.Threading.Tasks.Task<int> AddMessageAsync(WcfServiceLibrary.Messages entityToAdd) {
            return base.Channel.AddMessageAsync(entityToAdd);
        }
        
        public WcfServiceLibrary.Messages[] GetAllMessages() {
            return base.Channel.GetAllMessages();
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Messages[]> GetAllMessagesAsync() {
            return base.Channel.GetAllMessagesAsync();
        }
        
        public WcfServiceLibrary.Messages GetMessageById(int entityToGetById) {
            return base.Channel.GetMessageById(entityToGetById);
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Messages> GetMessageByIdAsync(int entityToGetById) {
            return base.Channel.GetMessageByIdAsync(entityToGetById);
        }
        
        public int GetIdOfMessage(WcfServiceLibrary.Messages entityToGetId) {
            return base.Channel.GetIdOfMessage(entityToGetId);
        }
        
        public System.Threading.Tasks.Task<int> GetIdOfMessageAsync(WcfServiceLibrary.Messages entityToGetId) {
            return base.Channel.GetIdOfMessageAsync(entityToGetId);
        }
        
        public WcfServiceLibrary.Messages[] GetReceivedMessages(int userId) {
            return base.Channel.GetReceivedMessages(userId);
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Messages[]> GetReceivedMessagesAsync(int userId) {
            return base.Channel.GetReceivedMessagesAsync(userId);
        }
        
        public WcfServiceLibrary.Messages[] GetSentMessages(int userId) {
            return base.Channel.GetSentMessages(userId);
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Messages[]> GetSentMessagesAsync(int userId) {
            return base.Channel.GetSentMessagesAsync(userId);
        }
        
        public void RemoveMessageById(int entityToRemoveById) {
            base.Channel.RemoveMessageById(entityToRemoveById);
        }
        
        public System.Threading.Tasks.Task RemoveMessageByIdAsync(int entityToRemoveById) {
            return base.Channel.RemoveMessageByIdAsync(entityToRemoveById);
        }
        
        public void UpdateMessage(WcfServiceLibrary.Messages entityToUpdate) {
            base.Channel.UpdateMessage(entityToUpdate);
        }
        
        public System.Threading.Tasks.Task UpdateMessageAsync(WcfServiceLibrary.Messages entityToUpdate) {
            return base.Channel.UpdateMessageAsync(entityToUpdate);
        }
        
        public int AddSemester(WcfServiceLibrary.Semesters entityToAdd) {
            return base.Channel.AddSemester(entityToAdd);
        }
        
        public System.Threading.Tasks.Task<int> AddSemesterAsync(WcfServiceLibrary.Semesters entityToAdd) {
            return base.Channel.AddSemesterAsync(entityToAdd);
        }
        
        public WcfServiceLibrary.Semesters[] GetAllSemesters() {
            return base.Channel.GetAllSemesters();
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Semesters[]> GetAllSemestersAsync() {
            return base.Channel.GetAllSemestersAsync();
        }
        
        public WcfServiceLibrary.Semesters GetSemesterById(int entityToGetById) {
            return base.Channel.GetSemesterById(entityToGetById);
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Semesters> GetSemesterByIdAsync(int entityToGetById) {
            return base.Channel.GetSemesterByIdAsync(entityToGetById);
        }
        
        public int GetIdOfSemester(WcfServiceLibrary.Semesters entityToGetId) {
            return base.Channel.GetIdOfSemester(entityToGetId);
        }
        
        public System.Threading.Tasks.Task<int> GetIdOfSemesterAsync(WcfServiceLibrary.Semesters entityToGetId) {
            return base.Channel.GetIdOfSemesterAsync(entityToGetId);
        }
        
        public void RemoveSemesterById(int entityToRemoveById) {
            base.Channel.RemoveSemesterById(entityToRemoveById);
        }
        
        public System.Threading.Tasks.Task RemoveSemesterByIdAsync(int entityToRemoveById) {
            return base.Channel.RemoveSemesterByIdAsync(entityToRemoveById);
        }
        
        public void UpdateSemester(WcfServiceLibrary.Semesters entityToUpdate) {
            base.Channel.UpdateSemester(entityToUpdate);
        }
        
        public System.Threading.Tasks.Task UpdateSemesterAsync(WcfServiceLibrary.Semesters entityToUpdate) {
            return base.Channel.UpdateSemesterAsync(entityToUpdate);
        }
        
        public WcfServiceLibrary.Students[] GetAllStudents() {
            return base.Channel.GetAllStudents();
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Students[]> GetAllStudentsAsync() {
            return base.Channel.GetAllStudentsAsync();
        }
        
        public WcfServiceLibrary.Students GetStudentById(int entityToGetById) {
            return base.Channel.GetStudentById(entityToGetById);
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Students> GetStudentByIdAsync(int entityToGetById) {
            return base.Channel.GetStudentByIdAsync(entityToGetById);
        }
        
        public int GetIdOfStudent(WcfServiceLibrary.Students entityToGetId) {
            return base.Channel.GetIdOfStudent(entityToGetId);
        }
        
        public System.Threading.Tasks.Task<int> GetIdOfStudentAsync(WcfServiceLibrary.Students entityToGetId) {
            return base.Channel.GetIdOfStudentAsync(entityToGetId);
        }
        
        public void UpdateStudent(WcfServiceLibrary.Students entityToUpdate) {
            base.Channel.UpdateStudent(entityToUpdate);
        }
        
        public System.Threading.Tasks.Task UpdateStudentAsync(WcfServiceLibrary.Students entityToUpdate) {
            return base.Channel.UpdateStudentAsync(entityToUpdate);
        }
        
        public int AddSubject(WcfServiceLibrary.Subjects entityToAdd) {
            return base.Channel.AddSubject(entityToAdd);
        }
        
        public System.Threading.Tasks.Task<int> AddSubjectAsync(WcfServiceLibrary.Subjects entityToAdd) {
            return base.Channel.AddSubjectAsync(entityToAdd);
        }
        
        public WcfServiceLibrary.Subjects[] GetAllSubjects() {
            return base.Channel.GetAllSubjects();
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Subjects[]> GetAllSubjectsAsync() {
            return base.Channel.GetAllSubjectsAsync();
        }
        
        public WcfServiceLibrary.Subjects GetSubjectById(int entityToGetById) {
            return base.Channel.GetSubjectById(entityToGetById);
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Subjects> GetSubjectByIdAsync(int entityToGetById) {
            return base.Channel.GetSubjectByIdAsync(entityToGetById);
        }
        
        public int GetIdOfSubject(WcfServiceLibrary.Subjects entityToGetId) {
            return base.Channel.GetIdOfSubject(entityToGetId);
        }
        
        public System.Threading.Tasks.Task<int> GetIdOfSubjectAsync(WcfServiceLibrary.Subjects entityToGetId) {
            return base.Channel.GetIdOfSubjectAsync(entityToGetId);
        }
        
        public void RemoveSubjectById(int entityToRemoveById) {
            base.Channel.RemoveSubjectById(entityToRemoveById);
        }
        
        public System.Threading.Tasks.Task RemoveSubjectByIdAsync(int entityToRemoveById) {
            return base.Channel.RemoveSubjectByIdAsync(entityToRemoveById);
        }
        
        public void UpdateSubject(WcfServiceLibrary.Subjects entityToUpdate) {
            base.Channel.UpdateSubject(entityToUpdate);
        }
        
        public System.Threading.Tasks.Task UpdateSubjectAsync(WcfServiceLibrary.Subjects entityToUpdate) {
            return base.Channel.UpdateSubjectAsync(entityToUpdate);
        }
        
        public int AddSubjectsUser(WcfServiceLibrary.SubjectsUsers entityToAdd) {
            return base.Channel.AddSubjectsUser(entityToAdd);
        }
        
        public System.Threading.Tasks.Task<int> AddSubjectsUserAsync(WcfServiceLibrary.SubjectsUsers entityToAdd) {
            return base.Channel.AddSubjectsUserAsync(entityToAdd);
        }
        
        public WcfServiceLibrary.SubjectsUsers[] GetAllSubjectsUsers() {
            return base.Channel.GetAllSubjectsUsers();
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.SubjectsUsers[]> GetAllSubjectsUsersAsync() {
            return base.Channel.GetAllSubjectsUsersAsync();
        }
        
        public int GetRegisteredStudentsCount(WcfServiceLibrary.Subjects subject) {
            return base.Channel.GetRegisteredStudentsCount(subject);
        }
        
        public System.Threading.Tasks.Task<int> GetRegisteredStudentsCountAsync(WcfServiceLibrary.Subjects subject) {
            return base.Channel.GetRegisteredStudentsCountAsync(subject);
        }
        
        public int GetRegisteredTeachersCount(WcfServiceLibrary.Subjects subject) {
            return base.Channel.GetRegisteredTeachersCount(subject);
        }
        
        public System.Threading.Tasks.Task<int> GetRegisteredTeachersCountAsync(WcfServiceLibrary.Subjects subject) {
            return base.Channel.GetRegisteredTeachersCountAsync(subject);
        }
        
        public WcfServiceLibrary.Users GetSubjectTeacher(WcfServiceLibrary.Subjects subject) {
            return base.Channel.GetSubjectTeacher(subject);
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Users> GetSubjectTeacherAsync(WcfServiceLibrary.Subjects subject) {
            return base.Channel.GetSubjectTeacherAsync(subject);
        }
        
        public WcfServiceLibrary.SubjectsUsers GetSubjectsUserById(int entityToGetById) {
            return base.Channel.GetSubjectsUserById(entityToGetById);
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.SubjectsUsers> GetSubjectsUserByIdAsync(int entityToGetById) {
            return base.Channel.GetSubjectsUserByIdAsync(entityToGetById);
        }
        
        public int GetIdOfSubjectsUser(WcfServiceLibrary.SubjectsUsers entityToGetId) {
            return base.Channel.GetIdOfSubjectsUser(entityToGetId);
        }
        
        public System.Threading.Tasks.Task<int> GetIdOfSubjectsUserAsync(WcfServiceLibrary.SubjectsUsers entityToGetId) {
            return base.Channel.GetIdOfSubjectsUserAsync(entityToGetId);
        }
        
        public void RegisterUserToSubject(WcfServiceLibrary.Users user, WcfServiceLibrary.Subjects subject) {
            base.Channel.RegisterUserToSubject(user, subject);
        }
        
        public System.Threading.Tasks.Task RegisterUserToSubjectAsync(WcfServiceLibrary.Users user, WcfServiceLibrary.Subjects subject) {
            return base.Channel.RegisterUserToSubjectAsync(user, subject);
        }
        
        public void RemoveSubjectsUserById(int entityToRemoveById) {
            base.Channel.RemoveSubjectsUserById(entityToRemoveById);
        }
        
        public System.Threading.Tasks.Task RemoveSubjectsUserByIdAsync(int entityToRemoveById) {
            return base.Channel.RemoveSubjectsUserByIdAsync(entityToRemoveById);
        }
        
        public void UpdateSubjectsUser(WcfServiceLibrary.SubjectsUsers entityToUpdate) {
            base.Channel.UpdateSubjectsUser(entityToUpdate);
        }
        
        public System.Threading.Tasks.Task UpdateSubjectsUserAsync(WcfServiceLibrary.SubjectsUsers entityToUpdate) {
            return base.Channel.UpdateSubjectsUserAsync(entityToUpdate);
        }
        
        public WcfServiceLibrary.Teachers[] GetAllTeachers() {
            return base.Channel.GetAllTeachers();
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Teachers[]> GetAllTeachersAsync() {
            return base.Channel.GetAllTeachersAsync();
        }
        
        public WcfServiceLibrary.Teachers GetTeacherById(int entityToGetById) {
            return base.Channel.GetTeacherById(entityToGetById);
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Teachers> GetTeacherByIdAsync(int entityToGetById) {
            return base.Channel.GetTeacherByIdAsync(entityToGetById);
        }
        
        public int GetIdOfTeacher(WcfServiceLibrary.Teachers entityToGetId) {
            return base.Channel.GetIdOfTeacher(entityToGetId);
        }
        
        public System.Threading.Tasks.Task<int> GetIdOfTeacherAsync(WcfServiceLibrary.Teachers entityToGetId) {
            return base.Channel.GetIdOfTeacherAsync(entityToGetId);
        }
        
        public void UpdateTeacher(WcfServiceLibrary.Teachers entityToUpdate) {
            base.Channel.UpdateTeacher(entityToUpdate);
        }
        
        public System.Threading.Tasks.Task UpdateTeacherAsync(WcfServiceLibrary.Teachers entityToUpdate) {
            return base.Channel.UpdateTeacherAsync(entityToUpdate);
        }
        
        public int AddUser(WcfServiceLibrary.Users entityToAdd) {
            return base.Channel.AddUser(entityToAdd);
        }
        
        public System.Threading.Tasks.Task<int> AddUserAsync(WcfServiceLibrary.Users entityToAdd) {
            return base.Channel.AddUserAsync(entityToAdd);
        }
        
        public WcfServiceLibrary.Users[] GetAllUsers() {
            return base.Channel.GetAllUsers();
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Users[]> GetAllUsersAsync() {
            return base.Channel.GetAllUsersAsync();
        }
        
        public WcfServiceLibrary.Users GetUserById(int entityToGetById) {
            return base.Channel.GetUserById(entityToGetById);
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Users> GetUserByIdAsync(int entityToGetById) {
            return base.Channel.GetUserByIdAsync(entityToGetById);
        }
        
        public int GetIdOfUser(WcfServiceLibrary.Users entityToGetId) {
            return base.Channel.GetIdOfUser(entityToGetId);
        }
        
        public System.Threading.Tasks.Task<int> GetIdOfUserAsync(WcfServiceLibrary.Users entityToGetId) {
            return base.Channel.GetIdOfUserAsync(entityToGetId);
        }
        
        public void RemoveUserById(int entityToRemoveById) {
            base.Channel.RemoveUserById(entityToRemoveById);
        }
        
        public System.Threading.Tasks.Task RemoveUserByIdAsync(int entityToRemoveById) {
            return base.Channel.RemoveUserByIdAsync(entityToRemoveById);
        }
        
        public int GetUserId(WcfServiceLibrary.Users user) {
            return base.Channel.GetUserId(user);
        }
        
        public System.Threading.Tasks.Task<int> GetUserIdAsync(WcfServiceLibrary.Users user) {
            return base.Channel.GetUserIdAsync(user);
        }
        
        public WcfServiceLibrary.Users[] GetTeachersFromUsers() {
            return base.Channel.GetTeachersFromUsers();
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Users[]> GetTeachersFromUsersAsync() {
            return base.Channel.GetTeachersFromUsersAsync();
        }
        
        public bool Login(string eduId, string password) {
            return base.Channel.Login(eduId, password);
        }
        
        public System.Threading.Tasks.Task<bool> LoginAsync(string eduId, string password) {
            return base.Channel.LoginAsync(eduId, password);
        }
        
        public void UpdateUser(WcfServiceLibrary.Users entityToUpdate) {
            base.Channel.UpdateUser(entityToUpdate);
        }
        
        public System.Threading.Tasks.Task UpdateUserAsync(WcfServiceLibrary.Users entityToUpdate) {
            return base.Channel.UpdateUserAsync(entityToUpdate);
        }
        
        public WcfServiceLibrary.AppInfo GetAppInfo() {
            return base.Channel.GetAppInfo();
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.AppInfo> GetAppInfoAsync() {
            return base.Channel.GetAppInfoAsync();
        }
    }
}
